(this.webpackJsonpautovolagui=this.webpackJsonpautovolagui||[]).push([[0],{20:function(e,t,n){},25:function(e,t,n){},30:function(e,t,n){},31:function(e,t,n){},34:function(e,t,n){},40:function(e,t,n){},41:function(e,t,n){},42:function(e,t,n){},53:function(e,t,n){},64:function(e,t,n){"use strict";n.r(t);var i=n(2),a=n.n(i),s=n(15),l=n.n(s),o=(n(40),n(41),n(27)),r=n(6),c=(n(42),n(0));var d=Object(r.g)((function(e){return Object(c.jsxs)("div",{id:"main",children:[Object(c.jsx)("div",{id:"topmenu",children:" "}),Object(c.jsxs)("div",{id:"sidemenu",children:[Object(c.jsx)("div",{id:"sidemenu-top",children:Object(c.jsx)("img",{id:"image",src:"images/autovola.jpg",alt:"AUTOVOLA"})}),Object(c.jsxs)("div",{id:"menu-block",className:"up-block",children:[Object(c.jsx)("img",{className:"inner",id:"menu-button-image",src:"images/reports.png"}),Object(c.jsx)("a",{href:"/reports",className:"inner",id:"menu-item  ".concat("/reports"===e.location.pathname?"active":""),children:"Reports"})]}),Object(c.jsxs)("div",{id:"menu-block",children:[Object(c.jsx)("img",{className:"inner",id:"menu-button-image",src:"images/upload-isf.png"}),Object(c.jsx)("a",{href:"/symbols",className:"inner",id:"menu-item  ".concat("/symbols"===e.location.pathname?"active":""),children:"Upload ISF"})]}),Object(c.jsxs)("div",{id:"menu-block",children:[Object(c.jsx)("img",{className:"inner",id:"menu-button-image",src:"images/upload-dump.png"}),Object(c.jsx)("a",{href:"/dump",className:"inner",id:"menu-item  ".concat("/dump"===e.location.pathname?"active":""),children:"Upload dump"})]})]})]})})),u=n(13),h=n.n(u),p=n(17),m=n(7),b=n(8),g=n(1),f=n(10),y=n(9),j=n(4),v=n.n(j),O=(n(30),function(){var e=[];return e.push(Object(c.jsxs)("div",{id:"info-pop-up",style:{display:"none"},children:[Object(c.jsx)("p",{}),Object(c.jsx)("input",{id:"close-pop-up-button",type:"image",src:"images/pop-up-close.png",alt:"close",onClick:function(){return v()("#info-pop-up").hide()}})]})),e}),x=function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],i=v()("#info-pop-up");i.find("p").text(e),i.css("background-color",t),i.show(),!0===n&&i.delay(3e3).fadeOut()},w=function(e){e.target.attributes.name.nodeValue;var t=parseInt(e.target.innerText),n=JSON.parse(JSON.stringify(this.state.pages));n.pageNumber=t,this.setState({pages:n})},k=function(e){e.target.attributes.name.nodeValue;var t=JSON.parse(JSON.stringify(this.state.pages));t.showAll=!0,this.setState({pages:t})},D=function(e){e.target.attributes.name.nodeValue;var t=JSON.parse(JSON.stringify(this.state.pages));t.showAll=!1,this.setState({pages:t})},S=function(e){e.target.attributes.name.nodeValue;var t=parseInt(e.target.innerText),n=JSON.parse(JSON.stringify(this.state.pages));n.elementsVisible=t,n.pageNumber=1,this.setState({pages:n})},P=function(e){var t=e.target.attributes.alt.nodeValue,n=e.target.parentElement.previousSibling.innerText,i=JSON.parse(JSON.stringify(this.state.dumpData));i.forEach((function(e){null==e[n]&&(e[n]="")}));try{"desc"===t?i.sort((function(e,t){return e[n].toLowerCase()>t[n].toLowerCase()?1:t[n].toLowerCase()>e[n].toLowerCase()?-1:0})):"asc"===t&&i.sort((function(e,t){return e[n].toLowerCase()<t[n].toLowerCase()?1:t[n].toLowerCase()<e[n].toLowerCase()?-1:0}))}catch(a){a instanceof TypeError&&("desc"===t?i.sort((function(e,t){return e[n]-t[n]})):"asc"===t&&i.sort((function(e,t){return t[n]-e[n]})))}this.setState({dumpData:i})},C=function(e){for(var t=e.toString(16).toUpperCase(),n=t.length;n<16;n+=2)t="00"+t;return t="0x"+t},I=function(e){var t=e.toString(16).toUpperCase();return t="0x"+t},N=function(e){if(0===e)return"0 Byte";var t=parseInt(Math.floor(Math.log(e)/Math.log(1024)));return Math.round(e/Math.pow(1024,t),2)+" "+["Bytes","KB","MB","GB","TB"][t]},B=function(e){var t=this,n=[],i="page-header";return n.push(Object(c.jsxs)("div",{id:"plugin-page-header",children:[Object(c.jsx)("img",{src:"images/return.png",id:"return-button",onClick:this.props.returnFromAnalysis}),this.buildHeaderBlocksMenu()," ",this.searchBar(),this.buildPluginCheckBox(),this.buildPluginCategoryMenu(),Object(c.jsxs)("div",{id:"header-info-container",children:[Object(c.jsx)("img",{src:"images/plugin-info-white.png",name:i,id:"info-button",onClick:function(){return t.pluginInfo(i)}}),this.DOMParserInfoBox(i,e)]})]})),n},T=function(){var e=this,t=[];return t.push(Object(c.jsxs)("select",{id:"all-data-blocks-amount",defaultValue:"20",onChange:function(t){return e.allVisibleDataBlocks(e.state.pageDetails,t.target.value)},children:[Object(c.jsx)("option",{disabled:!0,value:!0,children:"Data blocks"}),Object(c.jsx)("option",{value:"5",children:"5"}),Object(c.jsx)("option",{value:"10",children:"10"}),Object(c.jsx)("option",{value:"20",children:"20"}),Object(c.jsx)("option",{value:"50",children:"50"}),Object(c.jsx)("option",{value:"200",children:"200"})]})),t},F=function(e,t){for(var n in e)if(e[n].value===t)return!0;return!1},A=function(e,t){var n=JSON.parse(JSON.stringify(e)),i=JSON.parse(JSON.stringify(n.pages));for(var a in i)i[a].elementsVisible=parseInt(t);n.pages=JSON.parse(JSON.stringify(i)),this.setState({pageDetails:n})},M=function(e){var t=v()('#info-box[name="'+e+'"]');"block"===t.css("display")?t.fadeOut():"none"===t.css("display")&&t.fadeIn()},_=function(e){var t=[];if("info"===e)var n="data:attachment/text,"+encodeURI(JSON.stringify(this.state.dumpData.info));else n="data:attachment/text,"+encodeURI(JSON.stringify(this.state.dumpData));return t.push(Object(c.jsx)("a",{target:"_blank",download:e+".json",href:n,children:Object(c.jsx)("img",{src:"images/json-download.svg",id:"json-download-button"})},"jsondownload"+e)),t},R=function(e,t){var n=this,i=[];return i.push(Object(c.jsxs)("div",{id:"plugin-box-header",children:[Object(c.jsx)("div",{id:"plugin-name",children:e},"plugin-name"+e),this.buildJSONDownloadIcon(e),Object(c.jsx)("img",{src:"images/plugin-info.png",id:"plugin-info-button",name:e,onClick:function(){return n.pluginInfo(e)}},"plugin-info-button"+e),this.infoBox(e,t,e)]},"plugin-box-header"+e)),i},L=function(e,t,n){var i=this,a=0;return Object(c.jsxs)("div",{id:"info-box",name:e,style:{display:"none"},children:[Object(c.jsx)("img",{src:"images/close-grey.png",id:"close-info-box",name:e,onClick:function(){return i.pluginInfo(e)}}),Object(c.jsx)("h2",{children:n}),t.split("\n").map((function(e){return Object(c.jsx)("p",{children:e},"header"+a++)}))]},n+e)},E=function(e,t){var n=this;return Object(c.jsxs)("div",{id:"info-box",name:e,style:{display:"none"},children:[Object(c.jsx)("img",{src:"images/close-grey.png",id:"close-info-box",name:e,onClick:function(){return n.pluginInfo(e)}}),Object(c.jsx)("div",{dangerouslySetInnerHTML:{__html:t}},"danger"+e)]},e)},H=function(e,t,n,i){var a=this,s=[];return s.push(Object(c.jsxs)("div",{id:"options-block",children:[Object(c.jsx)("div",{id:"option",style:!0===i?{}:{display:"none"},name:e,onClick:function(e){return a.showLess(e)},children:"Hide"}),Object(c.jsx)("div",{id:"option",style:!1===i?{}:{display:"none"},name:e,onClick:function(e){return a.showAll(e)},children:"Show all"}),Object(c.jsxs)("div",{id:"amounts",children:[Object(c.jsx)("div",{id:"amount",style:!1===i?{}:{display:"none"},name:e,onClick:function(e){return a.visibleDataBlocks(e)},children:"5"}),Object(c.jsx)("div",{id:"amount",style:!1===i?{}:{display:"none"},name:e,onClick:function(e){return a.visibleDataBlocks(e)},children:"10"}),Object(c.jsx)("div",{id:"amount",style:!1===i?{}:{display:"none"},name:e,onClick:function(e){return a.visibleDataBlocks(e)},children:"20"}),Object(c.jsx)("div",{id:"amount",style:!1===i?{}:{display:"none"},name:e,onClick:function(e){return a.visibleDataBlocks(e)},children:"50"}),Object(c.jsx)("div",{id:"amount",style:!1===i?{}:{display:"none"},name:e,onClick:function(e){return a.visibleDataBlocks(e)},children:"200"})]}),Object(c.jsxs)("div",{id:"pages",children:[Object(c.jsx)("div",{id:"first-page",style:1===t||!0===i?{display:"none"}:{},name:e,onClick:function(e){return a.changePage(e)},children:"1"}),Object(c.jsx)("div",{id:"mid-page",style:t>4&&!1===i?{}:{display:"none"},children:".."}),Object(c.jsx)("div",{id:"mid-page",style:t>3&&!1===i?{}:{display:"none"},name:e,onClick:function(e){return a.changePage(e)},children:t-2}),Object(c.jsx)("div",{id:"mid-page",style:t>2&&!1===i?{}:{display:"none"},name:e,onClick:function(e){return a.changePage(e)},children:t-1}),Object(c.jsx)("div",{id:"current-page",style:!1===i?{}:{display:"none"},children:this.state.pages.pageNumber}),Object(c.jsx)("div",{id:"mid-page",style:t<n-1&&!1===i?{}:{display:"none"},name:e,onClick:function(e){return a.changePage(e)},children:t+1}),Object(c.jsx)("div",{id:"mid-page",style:t<n-2&&!1===i?{}:{display:"none"},name:e,onClick:function(e){return a.changePage(e)},children:t+2}),Object(c.jsx)("div",{id:"mid-page",style:t<n-3&&!1===i?{}:{display:"none"},children:".."}),Object(c.jsx)("div",{id:"last-page",style:t===n||!0===i?{display:"none"}:{},name:e,onClick:function(e){return a.changePage(e)},children:n})]})]})),s},V=function(e,t){var n=this,i=[];return i.push(Object(c.jsx)("ul",{className:"columns",children:t.map((function(t,i){return Object(c.jsxs)("li",{id:"column",style:t.style,children:[Object(c.jsx)("div",{id:"column-name",children:t.name},e+t+"column-name"+i),Object(c.jsxs)("ul",{id:"column-arrows",children:[Object(c.jsx)("li",{id:"column-arrow-up",alt:"asc",name:e,onClick:function(e){return n.displayOrder(e)},children:"\u2191"},e+t+"column-arrow-up"+i),Object(c.jsx)("li",{id:"column-arrow-down",alt:"desc",name:e,onClick:function(e){return n.displayOrder(e)},children:"\u2193"},e+t+"column-arrow-down"+i)]},e+t+"column-arrows"+i)]},e+NaN+i)}))},e+"columns")),i},W=function(e,t,n,i,a){var s=[],l=[];if(!0!==a){Object.keys(e).forEach((function(t,n,i){i[n+1]?l.push(Object(c.jsx)("li",{id:"data-block",style:e[t].style},"emptyblockright"+n+e[t])):l.push(Object(c.jsx)("li",{id:"data-block",className:"right-side",style:e[t].style},"emptyblockright"+n+e[t]))}));for(var o=i;o<n*t;o++)s.push(Object(c.jsx)("ul",{id:"plugin-data-container",children:l},"plugindatacontainer2"+o+t));return s}},z=function(e,t,n){var i=[],a=this.state.dumpData;try{if(0===a.length)return null}catch(d){return null}var s=this.state.pages.pageNumber,l=this.state.pages.showAll,o=this.state.pages.elementsVisible,r=Math.ceil(a.length/o);return i.push(Object(c.jsxs)("div",{id:"inner-plugin-box",className:e,children:[this.pluginBoxHeader(e,n),Object(c.jsxs)("div",{id:"plugin-container",children:[Object(c.jsx)("div",{className:"plugin-columns",name:e,children:this.pluginDataColumns(e,t)},"plugin-columns"+e),Object(c.jsxs)("div",{name:e,children:[a.slice(!0===l?0:s*o-o,!0===l?a.length:s*o).map((function(n,i){return Object(c.jsx)("ul",{id:"plugin-data-container",children:t.map((function(t,a,s){return s.length-1===a?Object(c.jsx)("li",{id:"data-block",className:"right-side",style:t.style,children:n[t.name]},"datablock-right"+a+n+i+e):Object(c.jsx)("li",{id:"data-block",style:t.style,children:n[t.name]},"datablock"+a+n+i+e)}))},"plugindatacontainer"+i+e)})),this.pluginDataBlocksFill(t,o,s,a.length,l)]},"plugincontainer div"+e),this.pluginContainerFooter(e,s,r,l)]},"plugincontainer"+e)]},"innerplugbox"+e)),i},U=function(e){Object(f.a)(n,e);var t=Object(y.a)(n);function n(e){var i;return Object(m.a)(this,n),(i=t.call(this,e)).onDescriptionChange=function(e){i.setState({description:e.target.value})},i.onOsChange=function(e){i.setState({os:e.target.value})},i.onFileChange=function(e){i.setState({dump:e.target.files[0]})},i.state={dump:null,os:"windows",description:"",chunkSize:5e6},i.onDescriptionChange=i.onDescriptionChange.bind(Object(g.a)(i)),i.onFileChange=i.onFileChange.bind(Object(g.a)(i)),i.onOsChange=i.onOsChange.bind(Object(g.a)(i)),i.uploadDump=i.uploadDump.bind(Object(g.a)(i)),i.uploadChunk=i.uploadChunk.bind(Object(g.a)(i)),i.progressBar=i.progressBar.bind(Object(g.a)(i)),i.buildInfoPopUp=O.bind(Object(g.a)(i)),i.showInfoPopUp=x.bind(Object(g.a)(i)),i}return Object(b.a)(n,[{key:"progressBar",value:function(){var e=Object(p.a)(h.a.mark((function e(t,n){var i;return h.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:i=t/n*100,v()("#bar").css("width",i+"%"),v()("#bar-text").text(i.toFixed(2)+"%"),"none"==v()("#progress-bar-container").css("display")&&v()("#progress-bar-container").css("display","block"),t===n&&(this.showInfoPopUp("File: "+this.state.dump.name+" uploaded","#5DD55D",!1),setTimeout((function(){v()("#bar").css("width","0%"),v()("#progress-bar-container").css("display","none")}),3e3));case 5:case"end":return e.stop()}}),e,this)})));return function(t,n){return e.apply(this,arguments)}}()},{key:"uploadDump",value:function(){var e=Object(p.a)(h.a.mark((function e(t){var n,i,a,s,l,o,r,c,d,u,p,m;return h.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),null!=this.state.dump){e.next=4;break}return this.showInfoPopUp("Select dump to upload","#FF4D4D",!1),e.abrupt("return");case 4:if(null!=this.state.os){e.next=7;break}return this.showInfoPopUp("Select operating system","#FF4D4D",!1),e.abrupt("return");case 7:n=0,i=this.state.chunkSize,a=this.state.dump,s=a.size,l=this.state.os,o=this.state.description,r=Math.ceil(s/this.state.chunkSize),c="http://autovola.com:8080/api/v1/upload/dump/",d=a.slice(n,i),u=(new Date).getTime(),(p=new FormData).set("last_chunk",r),p.set("file_id",u),p.set("system",l),p.set("filename",a.name),p.set("description",o),m=1;case 24:if(!(m<=r)){e.next=37;break}if(d=a.slice(n,i),p.set("chunk",d),p.set("current_chunk",m),!0===this.uploadChunk(p,a,c)){e.next=31;break}return this.showInfoPopUp("Failed to send "+a.name,"#FF4D4D",!1),e.abrupt("break",37);case 31:n+=this.state.chunkSize,i=n+this.state.chunkSize,this.progressBar(m,r);case 34:m++,e.next=24;break;case 37:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"uploadChunk",value:function(e,t,n){var i=!0;return v.a.ajax({contentType:!1,processData:!1,cache:!1,enctype:"multipart/form-data",headers:{"Access-Control-Allow-Origin":"*"},url:n,tryCount:0,retryLimit:3,type:"POST",data:e,async:!1,complete:function(e,n,a){try{"Fail"===e.responseJSON.response?(this.tryCount++,this.tryCount<=this.retryLimit&&(v.a.ajax(this),i=!0),i=!1):"Done"===e.responseJSON.response?console.log("File: "+t.name+" uploaded"):"OK"===e.responseJSON.response?i=!0:console.log("Server returned: "+String(e.responseJSON.response))}catch(s){i=!1}}}),i}},{key:"render",value:function(){return Object(c.jsxs)("div",{id:"container",children:[this.buildInfoPopUp(),Object(c.jsxs)("form",{method:"post",id:"data",encType:"multipart/form-data",onSubmit:this.uploadDump,children:[Object(c.jsx)("h1",{children:"Choose memory dump to upload"}),Object(c.jsx)("div",{className:"input-container",children:Object(c.jsx)("input",{type:"file",id:"dump",name:"dump",onChange:this.onFileChange})}),Object(c.jsxs)("select",{name:"os",id:"os-dropdown",onChange:this.onOsChange,value:this.state.os,children:[Object(c.jsx)("option",{disabled:!0,children:" Select OS"}),Object(c.jsx)("option",{value:"linux",children:"Linux"}),Object(c.jsx)("option",{value:"windows",children:"Windows"})]}),Object(c.jsx)("div",{id:"description-container",children:Object(c.jsx)("textarea",{type:"text",id:"description",name:"description",placeholder:"Add description (Optional)",onChange:this.onDescriptionChange})}),Object(c.jsx)("button",{id:"upload-btn",children:" Upload "})]}),Object(c.jsxs)("div",{id:"progress-bar-container",children:[Object(c.jsx)("div",{id:"bar"}),Object(c.jsx)("p",{id:"bar-text"})]}),Object(c.jsxs)("div",{id:"manual",children:[Object(c.jsx)("h2",{children:"Usage"}),Object(c.jsx)("p",{children:"Select dump you want to analyse and choose operating system from which the dump was taken from."}),Object(c.jsx)("p",{children:"In the description field you can write notes about the dump. Description can be modified later at any time."}),Object(c.jsx)("p",{children:"This version of Autovola supports analysis of Windows and Linux dumps."}),Object(c.jsx)("p",{children:"During the upload, page will be unresponsive."}),Object(c.jsxs)("p",{children:[Object(c.jsx)("b",{children:"Known issues:"})," Progress bar may not be visible with Chrome browsers when uploading dump."]})]})]})}}]),n}(a.a.Component),J=(n(53),function(e){Object(f.a)(n,e);var t=Object(y.a)(n);function n(e){var i;return Object(m.a)(this,n),(i=t.call(this,e)).onSubDirChange=function(e){i.setState({windowsSubDir:e.target.value})},i.onOsChange=function(e){"windows"===e.target.value?(v()("#windows-sub-dir-dropdown").css("display","block"),i.setState({os:e.target.value})):(v()("#windows-sub-dir-dropdown").hide(),i.setState({os:e.target.value,windowsSubDir:null}))},i.onFileChange=function(e){i.setState({symbolTable:e.target.files[0]})},i.state={symbolTable:null,os:"linux",chunkSize:5e6,windowsSubDir:"ntkrnlmp.pdb"},i.onFileChange=i.onFileChange.bind(Object(g.a)(i)),i.onOsChange=i.onOsChange.bind(Object(g.a)(i)),i.onSubDirChange=i.onSubDirChange.bind(Object(g.a)(i)),i.uploadSymbolTable=i.uploadSymbolTable.bind(Object(g.a)(i)),i.uploadChunk=i.uploadChunk.bind(Object(g.a)(i)),i.buildInfoPopUp=O.bind(Object(g.a)(i)),i.showInfoPopUp=x.bind(Object(g.a)(i)),i}return Object(b.a)(n,[{key:"progressBar",value:function(){var e=Object(p.a)(h.a.mark((function e(t,n){var i;return h.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:i=t/n*100,v()("#bar").css("width",i+"%"),v()("#bar-text").text(i.toFixed(2)+"%"),"none"==v()("#progress-bar-container").css("display")&&v()("#progress-bar-container").css("display","block"),t===n&&(this.showInfoPopUp("File: "+this.state.symbolTable.name+" uploaded","#5DD55D",!1),setTimeout((function(){v()("#bar").css("width","0%"),v()("#progress-bar-container").css("display","none")}),3e3));case 5:case"end":return e.stop()}}),e,this)})));return function(t,n){return e.apply(this,arguments)}}()},{key:"uploadSymbolTable",value:function(){var e=Object(p.a)(h.a.mark((function e(t){var n,i,a,s,l,o,r,c,d,u,p;return h.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),null!=this.state.symbolTable){e.next=4;break}return this.showInfoPopUp("Select ISF to upload","#FF4D4D",!1),e.abrupt("return");case 4:if(null!=this.state.os){e.next=7;break}return this.showInfoPopUp("Select operating system","#FF4D4D",!1),e.abrupt("return");case 7:if(n=0,i=this.state.chunkSize,a=this.state.symbolTable,s=a.size,l=this.state.os,o=Math.ceil(s/this.state.chunkSize),r="http://autovola.com:8080/api/v1/upload/symbols/",c=a.slice(n,i),d=(new Date).getTime(),u=new FormData,"windows"!==l){e.next=22;break}if(null!=this.state.windowsSubDir){e.next=21;break}return this.showInfoPopUp("Select Windows sub dir","#FF4D4D",!1),e.abrupt("return");case 21:u.set("windir",this.state.windowsSubDir);case 22:u.set("last_chunk",o),u.set("file_id",d),u.set("system",l),u.set("filename",a.name),p=1;case 27:if(!(p<=o)){e.next=40;break}if(c=a.slice(n,i),u.set("chunk",c),u.set("current_chunk",p),!0===this.uploadChunk(u,a,r)){e.next=34;break}return this.showInfoPopUp("Failed to send "+a.name,"#FF4D4D",!1),e.abrupt("break",40);case 34:n+=this.state.chunkSize,i=n+this.state.chunkSize,this.progressBar(p,o);case 37:p++,e.next=27;break;case 40:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}()},{key:"uploadChunk",value:function(e,t,n){var i=!0;return v.a.ajax({contentType:!1,processData:!1,cache:!1,enctype:"multipart/form-data",headers:{"Access-Control-Allow-Origin":"*"},url:n,retryLimit:3,tryCount:0,type:"POST",data:e,async:!1,complete:function(e,n,a){try{"Fail"===e.responseJSON.response?(this.tryCount++,this.tryCount<=this.retryLimit&&(v.a.ajax(this),i=!0),i=!1):"Done"===e.responseJSON.response?console.log("File: "+t.name+" uploaded"):"OK"===e.responseJSON.response?i=!0:console.log("Response from server: "+String(e.responseJSON.response))}catch(s){i=!1}}}),i}},{key:"render",value:function(){return Object(c.jsxs)("div",{id:"container",children:[this.buildInfoPopUp(),Object(c.jsxs)("form",{method:"post",id:"data",encType:"multipart/form-data",onSubmit:this.uploadSymbolTable,children:[Object(c.jsx)("h1",{children:"Choose ISF to upload"}),Object(c.jsx)("div",{className:"input-container",children:Object(c.jsx)("input",{type:"file",id:"symbol-table",name:"symbol-table",onChange:this.onFileChange})}),Object(c.jsxs)("select",{name:"os",id:"os-dropdown",onChange:this.onOsChange,value:this.state.os,children:[Object(c.jsx)("option",{disabled:!0,children:" Select OS "}),Object(c.jsx)("option",{value:"linux",children:"Linux"}),Object(c.jsx)("option",{value:"windows",children:"Windows"})]}),Object(c.jsxs)("select",{name:"windows-sub-dir",id:"windows-sub-dir-dropdown",value:this.state.windowsSubDir,onChange:this.onSubDirChange,children:[Object(c.jsx)("option",{disabled:!0,children:" Select Windows sub directory "}),Object(c.jsx)("option",{value:"ntkrnlmp.pdb",children:"ntkrnlmp.pdb"}),Object(c.jsx)("option",{value:"ntkrnlpa.pdb",children:"ntkrnlpa.pdb"}),Object(c.jsx)("option",{value:"ntkrpamp.pdb",children:"ntkrpamp.pdb"}),Object(c.jsx)("option",{value:"ntoskrnl.pdb",children:"ntoskrnl.pdb"})]}),Object(c.jsx)("button",{id:"upload-btn",children:" Upload "})]}),Object(c.jsxs)("div",{id:"progress-bar-container",children:[Object(c.jsx)("div",{id:"bar"}),Object(c.jsx)("p",{id:"bar-text"})]}),Object(c.jsxs)("div",{id:"manual",children:[Object(c.jsx)("h2",{children:"Usage"}),Object(c.jsx)("p",{children:"Intermediate symbol files (ISF) are stored as JSON, so when uploading symbol file make sure that the file has .json extension. Alternatively GZIP and XZ compressed JSON files are accepted, so if the symbol file is compressed it should be given corresponding extension .json.gz or .json.xz."}),Object(c.jsx)("p",{children:"It is good practice to test the symbol file locally before uploading it to Autovola. You can achieve this by following these steps in LINUX system (Steps are similar for Windows, but paths and commands are bit different):"}),Object(c.jsxs)("p",{children:["1. Move the file to ",Object(c.jsx)("span",{style:{color:"CornflowerBlue"},children:"(top-level Volatility path)/volatility3/framework/symbols/(windows or linux)/filename.json"})," "]}),Object(c.jsxs)("p",{children:["2. Remove Volatility cache for user running the plugin ",Object(c.jsx)("span",{style:{color:"grey"},children:"rm ~/.cache/volatility3/*"})]}),Object(c.jsxs)("p",{children:["3. Then use either Volatility Linux or Windows plugin to dump and check that no symbol table or translation layer requirement errors are seen. ",Object(c.jsx)("b",{children:"NOTE:"})," For windows dumps Volatility tries to automatically download corresponding PDB file from Microsoft's Symbol Server as stated in Windows section, so the manually added symbol file may not be correct."]}),Object(c.jsx)("h3",{children:"Windows"}),Object(c.jsxs)("p",{children:["Autovola contains these Windows symbol files for default ",Object(c.jsx)("a",{href:"https://downloads.volatilityfoundation.org/volatility3/symbols/windows.zip",children:"windows.zip"}),"."]}),Object(c.jsx)("p",{children:"Volatility tries to automatically download PDB file from Microsoft\u2019s Symbol Server if appropriate symbol file is not found locally. If Autovola is not connected to internet, symbol file can be created manually."}),Object(c.jsxs)("p",{children:["For windows symbol tables, volatility uses ",Object(c.jsx)("span",{style:{color:"green"},children:"<pdb-name>/<GUID>-<AGE>.json"})," naming convention."]}),Object(c.jsxs)("p",{children:["These JSON files can be constructed from PDB-files using Volatility 3 tool called pdbconv.py. It can be run directly from top-level Volatility path by using command ",Object(c.jsx)("span",{style:{color:"grey"},children:'PYTHONPATH="." python volatility3/framework/symbols/windows/pdbconv.py'})]}),Object(c.jsx)("p",{children:"Autovola supports uploading of pdbconv.py converted ntkrnlmp.pdb, ntkrnlpa.pdb, ntkrpamp.pdb and ntoskrnl.pdb files. When uploading ISF processed by pdbconv, remember to select the right sub directory or Volatility is not able to find the ISF."}),Object(c.jsx)("h4",{children:"Windows version 20H2 build 19042.804 example"}),Object(c.jsxs)("ol",{children:[Object(c.jsxs)("li",{children:["Start by cloning Volatility 3 by running ",Object(c.jsx)("b",{children:"git clone https://github.com/volatilityfoundation/volatility3"}),". Install Volatility 3 python package by running ",Object(c.jsx)("b",{children:"python3 setup.py install"})," in Volatility 3 base folder."]}),Object(c.jsxs)("li",{children:["Download ",Object(c.jsx)("a",{style:{textAlign:"left"},href:"https://github.com/rajkumar-rangaraj/PDB-Downloader/releases/download/v1.0/PDBDownloader.exe",children:"PDBDownloader.exe"}),". PDB Downloader is used to get symbol files for specific libraries from Microsoft\u2019s Symbol Server."]}),Object(c.jsxs)("li",{children:["Start PDB Downloader and click button ",Object(c.jsx)("b",{children:"Open File(s)"}),"."]}),Object(c.jsxs)("li",{children:["Select ",Object(c.jsx)("b",{children:"C:\\Windows\\System32\\ntoskrnl.exe"})," and press start on PDB Downloader. PDB Downloader should download the right PDB file somewhere under C:\\Symbols and open file explorer in C:\\Symbols."]}),Object(c.jsx)("li",{children:"There should be a directory called ntkrnlmp.pdb and inside that is directory 5278AFF86C341677D7D7835C85B7B8441 (GUID), which contains PDB file ntkrnlmp.pdb. Save this file for Volatility's pdbconv."}),Object(c.jsxs)("li",{children:["(For Linux) Go to Volatility3 base directory and run ",Object(c.jsx)("b",{children:"python3 volatility3/framework/symbols/windows/pdbconv.py -f ~/ntkrnlmp.pdb"}),". -f flag specifies the PDB file location. In this example it is user's home directory."]}),Object(c.jsxs)("li",{children:["Volatility creates ISF in base folder with name similar to this: 5278AFF86C341677D7D7835C85B7B844-5.json.xz. ",Object(c.jsx)("b",{children:"Do not change the file name!"})," Now upload that ISF to Autovola by setting OS to Windows and Windows Sub Directory to ",Object(c.jsx)("b",{children:"ntkrnlmp.pdb"})]}),Object(c.jsx)("li",{children:"Now Volatility should be able to analyse all dumps taken from Windows systems similar to this."})]}),Object(c.jsx)("h3",{children:"Linux"}),Object(c.jsx)("p",{children:"All Linux symbol files have to be created manually due to large amount of kernel versions and different distributions that get frequently updated."}),Object(c.jsxs)("p",{children:["Volatility foundation offers GO written tool called ",Object(c.jsx)("a",{href:"https://github.com/volatilityfoundation/dwarf2json",children:"dwarf2json"})," for this purpose. Tool can be used to create ISF (Intermediate Symbol File) JSON file, which serves as proper symbol file for Linux and MacOS's."]}),Object(c.jsx)("p",{children:"dwarf2json has good documentation of how to create proper symbol file for Linux. Easiest way is to use kernel debug symbol file to generate ISF from Linux system, from which the dump is created from."}),Object(c.jsxs)("p",{children:["If kernel debug symbol file is not available and you are experiencing difficulties trying to generate proper ISF, there is also ",Object(c.jsx)("a",{href:"https://github.com/volatilityfoundation/dwarf2json/tree/linux-module-method",children:"linux-module-method"})," branch, which offers alternative way to create ISF."]}),Object(c.jsx)("h3",{children:"Helpful links"}),Object(c.jsxs)("ul",{children:[Object(c.jsx)("li",{children:Object(c.jsx)("a",{style:{textAlign:"left"},href:"https://github.com/volatilityfoundation/volatility3",children:"Volatility 3 GitHub page"})}),Object(c.jsx)("li",{children:Object(c.jsx)("a",{style:{textAlign:"left"},href:"https://volatility3.readthedocs.io/en/latest/symbol-tables.html",children:"Official Volatility foundation symbol file creation documentation"})}),Object(c.jsx)("li",{children:Object(c.jsx)("a",{style:{textAlign:"left"},href:"https://docs.microsoft.com/en-us/archive/blogs/webtopics/pdb-downloader",children:"Microsoft documentation of PDB Downloader"})})]})]})]})}}]),n}(a.a.Component)),q=n(5),K=n(22),G=n(35),X=function(e){var t=this.processFilters(e);this.setState({search:t})},Y=function(){var e=this,t=[];return t.push(Object(c.jsxs)("form",{id:"plugin-search-container",onSubmit:function(t){t.preventDefault(),e.setSearch(v()('[name="search"]')[0].value)},children:[" ",Object(c.jsx)("button",{className:"search-btn",onClick:function(){return e.setSearch(v()('[name="search"]')[0].value)},children:" Search "}),Object(c.jsx)("input",{type:"text",className:"search-field",name:"search"})]})),t},Q=function(e,t,n){if(""==t||null==e)return e;var i=[];if(t.startsWith("GLOBAL "))t=t.replace("GLOBAL ",""),i=this.checkReports(t,e,n);else if(t.startsWith("LINUX ")){if("windows"===n)return;t=t.replace("LINUX ",""),i=this.checkReports(t,e,n)}else if(t.startsWith("WINDOWS ")){if("linux"===n)return;t=t.replace("WINDOWS ",""),i=this.checkReports(t,e,n)}else{var a;a=t.match(/(\([^)]*\)|\S)*/gi).filter(Boolean),i=e.filter((function(e){var t=a;for(var n in e){try{if(0==e[n].length)continue}catch(s){continue}if(t.filter((function(t){return String(e[n]).includes(t)}))){var i=t.filter((function(t){return String(e[n]).includes(t)}));t=t.filter((function(e){return!i.includes(e)}))}}if(0===t.length)return e}),this)}return i},$=function(e,t,n){var i=te(e),a=["_id","analyse_state","description","dumpsize","currenttime","os_info","name","tags"];return 0===i.length?t:t.filter((function(e){var t=this.getReports(n,e._id);for(var s in t)a.includes(s)&&delete t[s];if((t=(t=(t=Object.keys(t).map((function(e){return t[e]}))).filter((function(e){return null!=e&&""!=e&&"ERROR"!=e&&"UNDEFINED"!=e}))).filter((function(e){var t=i;t=Z(t,e[0]);try{if((e=e.filter((function(e){return this.filterSearch(e,t)}),this)).length>0)return e}catch(n){}}),this)).length>0)return e}),this)},Z=function e(t,n){for(var i=t,a=t.length,s=0;s<a;s++)if(!t[s].hasOwnProperty(""))if(Array.isArray(t[s]))!function(){var a=e(t[s],n);if(0===a.length)i=i.filter((function(e){return![a].includes(e)}));else{var l=t[s].indexOf(t[s]);-1!==l&&(i[l]=a)}}();else if("object"===typeof t[s]&&null!==t[s]){if(!0!==t[s][Object.keys(t[s])[0]].negate)continue;var l=!1;try{for(var o=0,r=Object.entries(n);o<r.length;o++){var c=Object(G.a)(r[o],2),d=c[0];c[1];Object.keys(t[s])[0]===d&&(l=!0)}if(!1!==l)continue;i=i.filter((function(e){return![t[s]].includes(e)})),"OR"===t[s-1]||"OR"===t[s-1]&&"OR"===t[s+1]?i=i.filter((function(e){return![t[s-1]].includes(e)})):"OR"===t[s+1]&&(i=i.filter((function(e){return![t[s+1]].includes(e)})))}catch(u){}}return i},ee=function(e){var t=this.state.search;if(""===t||null==e||"ERROR"===e||"UNSATISFIED"===e)return e;t=Z(t,e[0]);try{e=e.filter((function(e){return this.filterSearch(e,t)}),this)}catch(n){e=[]}return e},te=function e(t){var n=[];try{n=t.match(/(("((?:\\.|[^"\\])*)"):(("((?:\\.|[^"\\])*)")|((?<!\\)\(.*?(?<!\\)\))))|((?<!\\)("|-").*?(?<!\\)")|(?<!\\)\(.*?(?<!\\)\)|([^\s]*:(("((?:\\.|[^"\\])*)")|((?<!\\)\(.*?(?<!\\)\))))|(\S+)/gi).filter(Boolean)}catch(i){return""}return n=n.map((function(t){"("===t.charAt(0)&&")"===t.slice(-1)&&(t=(t=t.substring(1)).slice(0,-1),t=e(t));var n=!1,i={};if(Array.isArray(t))return t;if("OR"===t)return i={type:"logical",value:"OR"};if(/\S+(?<!\\):\(.*?(?<!\\)(\)|\\\))/.test(t)){if("-"===t.charAt(0)&&(n=!0,t=t.substring(1)),'"'===t.charAt(0))var a=t.split('":(')[0].substring(1);else a=t.split(":(")[0];t.includes("\\")&&(t=t.replace(/(?:\\(.))/g,"$1"));var s=t.match(/\(([^)]+)\)/)[1].replace(/\s/g,""),l=s.split("-")[0],o=s.split("-")[1];return i[a]={type:"range",start:parseInt(l),end:parseInt(o),negate:n},i}if(/[^\s]*:"(?:[^"\\]|\\.)*"/.test(t)){if("-"===t.charAt(0)&&(n=!0,t=t.substring(1)),'"'===t.charAt(0)){a=t.split('":"')[0].substring(1);var r=t.split(':"')[1].slice(0,-1)}else a=t.split(':"')[0],r=t.split(':"')[1].slice(0,-1);return i[a]={type:"value",value:r,negate:n},i}"-"===t.charAt(0)&&(n=!0,t=t.substring(1)),'"'===t.charAt(0)&&'"'===t.slice(-1)&&(t=(t=t.substring(1)).slice(0,-1));var c=t;return i[""]={type:"value",value:c,negate:n},i}))},ne=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=t;for(var a in e){var s=t.length,l=!1,o=!1;if(0===i.length&&!1===n)return e;for(var r=0;r<s;r++)if(t[r].constructor===Object&&null!==t[r])try{if(t[r].hasOwnProperty("type"))"OR"===t[r].value&&(i.indexOf(t[r-1])?i.indexOf(t[r-1])&&(i=(i=i.filter((function(e){return e!==t[r]}))).filter((function(e){return e!==t[r+1]}))):l=!0);else if(t[r].hasOwnProperty(a)){if("value"===t[r][a].type){var c=new RegExp("^"+String(t[r][a].value).replace(/\*/g,".*")+"$"),d=c.test(e[a]);if(d&&!1===t[r][a].negate){if(!1===l)i=i.filter((function(e){return e!==t[r]}));else if(!0===l)try{i=i.filter((function(e){return![t[r],t[r-1],t[r-2]].includes(e)}))}catch(b){i=i.filter((function(e){return![t[r],t[r-1]].includes(e)}))}o=!1}else if(d||!0!==t[r][a].negate){if(!0===o)return!n&&void 0}else!1===l?i=i.filter((function(e){return e!==t[r]})):!0===l&&(i=i.filter((function(e){return![t[r],t[r-1],t[r-2]].includes(e)}))),o=!1;l=!1}else if("range"===t[r][a].type){if(t[r][a].start<=parseInt(e[a])&&t[r][a].end>=parseInt(e[a])&&!1===t[r][a].negate)!1===l?i=i.filter((function(e){return e!==t[r]})):!0===l&&(i=i.filter((function(e){return![t[r],t[r-1],t[r-2]].includes(e)}))),o=!1;else if(t[r][a].start<=parseInt(e[a])&&t[r][a].end>=parseInt(e[a])||!0!==t[r][a].negate){if(!0===o)return!n&&void 0}else!1===l?i=i.filter((function(e){return e!==t[r]})):!0===l&&(i=i.filter((function(e){return![t[r],t[r-1],t[r-2]].includes(e)}))),o=!1;l=!1}}else if(t[r].hasOwnProperty("")){if("value"===t[r][""].type){var u=new RegExp("^"+String(t[r][""].value).replace(/\*/g,".*")+"$"),h=u.test(e[a]);if(h&&!1===t[r][""].negate)!1===l?i=i.filter((function(e){return e!==t[r]})):!0===l&&(i=i.filter((function(e){return![t[r],t[r-1],t[r-2]].includes(e)}))),o=!1;else if(h||!0!==t[r][""].negate){if(!0===o)return n?"fail":void 0;if(h&&!0===t[r][""].negate)try{if("OR"===t[r+1].value){o=!0;continue}return n?"fail":void 0}catch(b){return n?"fail":void 0}}else!1===l?i=i.filter((function(e){return e!==t[r]})):!0===l&&(i=i.filter((function(e){return![t[r],t[r-1],t[r-2]].includes(e)}))),o=!1}l=!1}}catch(b){continue}else if(Array.isArray(t[r])){var p=new Object;p[a]=e[a];var m=this.filterSearch(e,t[r],!0);if(!0===m)!1===l?i=i.filter((function(e){return e!==t[r]})):!0===l&&(i=i.filter((function(e){return![t[r],t[r-1],t[r-2]].includes(e)}))),o=!1;else{if("fail"===m)return;if(!1===m)if(!0===l){if(!0===o)break;if(!1===o)continue}else if(!1===l)try{if("OR"===t[r+1].value){o=!0;continue}}catch(b){break}}l=!1}}return 0===i.length&&!1===n?e:0===i.length&&!0===n||(0!==i.length&&!0===n?i:void 0)},ie={pslist:{info:"pslist shows basic details of processes running in the system.\n\n        - COMM: Name of the process running\n\n        - PID: Process ID\n\n        - PPID: Parent process ID",columns:[{name:"COMM",style:{width:"50%"}},{name:"PID",style:{width:"25%"}},{name:"PPID",style:{width:"25%"}}]},elfs:{info:"elfs lists all memory mapped ELF files for all processes.\n\n        - Process: Process name\n\n        - PID: Process ID\n\n        - File Path: Path to file or object\n\n        -- [vdso]: small shared library that the kernel automatically maps into the address space of all user-space applications\n        - Start: Starting virtual address in the process memory\n\n        - End: Ending virtual address in the process memory\n",columns:[{name:"Process",style:{width:"22.5%"}},{name:"PID",style:{width:"10%"}},{name:"File Path",style:{width:"22.5%"}},{name:"Start",style:{width:"22.5%"},update:"to64BitHex"},{name:"End",style:{width:"22.5%"},update:"to64BitHex"}]},check_modules:{info:"check_modules compares module list to sysfs info, if available.\n\n        - Module Name: Name of the module\n\n        - Module Address: Memory address of the module\n",columns:[{name:"Module Name",style:{width:"50%"}},{name:"Module Address",style:{width:"50%"},update:"to64BitHex"}]},check_creds:{info:'check_creds checks if any processes are sharing credential structures.\n\n        - PIDs: Process IDs of the processes sharing "cred" structures\n',columns:[{name:"PIDs",style:{width:"100%"}}]},lsmod:{info:"lsmod lists loaded kernel modules.\n\n        - Offset: Module location in memory\n\n        - Name: Name of the module\n\n        - Size: Module size in memory",columns:[{name:"Offset",style:{width:"40%"},update:"to64BitHex"},{name:"Name",style:{width:"40%"}},{name:"Size",style:{width:"20%"},update:"bytesToSize"}]},lsof:{info:"lsof lists all memory maps for all processes.\n\n        - Process: Process name\n\n        - PID: Process ID\n\n        - FD: File descriptor\n\n        - Path: Path to the file descriptor",columns:[{name:"Process",style:{width:"35%"}},{name:"PID",style:{width:"15%"}},{name:"FD",style:{width:"15%"}},{name:"Path",style:{width:"35%"}}]},keyboard_notifiers:{info:'Parses the keyboard notifier call chain. Plugin walks the kernel "keyboard_notifier_list" and checks if each notifier (callback) is within the kernel.\n\n        - Address: Handlers memory address\n\n        - Module: Name of the module hooking\n\n        - Symbol: Name of the symbol\n',columns:[{name:"Address",style:{width:"33.3%"},update:"to64BitHex"},{name:"Module",style:{width:"33.3%"}},{name:"Symbol",style:{width:"33.3%"}}]},check_idt:{info:"check_idt checks if the Linux interrupt-descriptor table has been altered.\n\n        - Index: Index number\n\n        - Address: Module address in memory\n\n        - Module: Module name\n\n        - Symbol: Name of the symbol",columns:[{name:"Index",style:{width:"15%"}},{name:"Address",style:{width:"35%"},update:"to64BitHex"},{name:"Module",style:{width:"15%"}},{name:"Symbol",style:{width:"35%"}}]},tty_check:{info:"Checks tty devices for hooks. It works by checking the receive_buf function pointer for every active tty driver on the system.\n\n        - Name: TTY device name\n\n        - Address: Handlers memory address\n\n        - Module: Name of the hooking module\n\n        - Symbol: Name of the symbol\n",columns:[{name:"Name",style:{width:"10%"}},{name:"Address",style:{width:"30%"},update:"to64BitHex"},{name:"Module",style:{width:"30%"}},{name:"Symbol",style:{width:"30%"}}]},check_syscall:{info:"check_syscall checks system call table for hooks.\n\n        - Table Name: Name of the syscall table\n\n        - Table Address: Memory address of the syscall table\n\n        - Index: Index number\n\n        - Handler Symbol: Handlers symbol name\n\n        - Handler Address: Memory address of the handler",columns:[{name:"Table Name",style:{width:"10%"}},{name:"Table Address",style:{width:"26.5%"},update:"to64BitHex"},{name:"Index",style:{width:"10%"}},{name:"Handler Symbol",style:{width:"26.5%"}},{name:"Handler Address",style:{width:"26.5%"},update:"to64BitHex"}]},check_afinfo:{info:"Verifies the operation function pointers of network protocols. Plugin walks the file_operations and sequence_operations structures of all UDP and TCP protocol structures including, tcp6_seq_afinfo, tcp4_seq_afinfo, udplite6_seq_afinfo, udp6_seq_afinfo, udplite4_seq_afinfo, and udp4_seq_afinfo, and verifies each member.\n\n        - Symbol Name: Name of the structure (e.g. udplite6_seq_afinfo)\n\n        - Member: Member name (e.g. show)\n\n        - Handler Address: Handlers memory address\n",columns:[{name:"Symbol Name",style:{width:"33.3%"}},{name:"Member",style:{width:"33.3%"}},{name:"Handler Address",style:{width:"33.3%"},update:"to64BitHex"}]},maps:{info:"maps lists all memory maps for all processes, which includes heaps, stacks, and shared libraries.\n\n        - Process: Process name\n\n        - PID: Process ID\n\n        - File Path: Path to file or object\n\n        -- Anonymous Mapping: Memory not relating to any named object or file within the file system is reported as this.\n        - Start: Starting virtual address in the process memory\n\n        - End: Ending virtual address in the process memory\n\n        - Flags: flags (rwx) describe what kind of access is permitted to this memory area.\n\n        -- r: memory block is readable.\n\n        -- w: memory block is writable.\n\n        -- x: memory block is executable.\n\n        - Inode: Inode number\n\n        - Major/Minor: Each device file has a major ID number and a minor ID number.\n        -- Major: Major ID identifies the general class of device, and is used by the kernel to look up the appropriate driver for this type of device.\n\n        -- Minor: Minor ID uniquely identifies a particular device within a general class. \n\n        - PgOff: Offset into the file that the region maps.",columns:[{name:"Process",style:{width:"15%"}},{name:"PID",style:{width:"5%"}},{name:"File Path",style:{width:"15%"}},{name:"Start",style:{width:"15%"},update:"to64BitHex"},{name:"End",style:{width:"15%"},update:"to64BitHex"},{name:"Flags",style:{width:"5%"}},{name:"Inode",style:{width:"15%"}},{name:"Major",style:{width:"5%"}},{name:"Minor",style:{width:"5%"}},{name:"PgOff",style:{width:"5%"}}]},malfind:{info:"malfind lists process memory ranges that potentially contain injected code. It looks for mappings with certain protection bits and displays the matching mappings.\n\n        - Process: Process name\n\n        - PID: Process ID\n\n        - Start: Starting virtual address in the process memory\n\n        - End: Ending virtual address in the process memory\n\n        - Protection: flags (rwx) describe what kind of access is permitted to this memory area.\n\n        -- r: memory block is readable.\n\n        -- w: memory block is writable.\n\n        -- x: memory block is executable.\n \n\n        - Hexdump: Preview hexdump from the memory\n\n        - Disasm: Preview disassembled if possible\n",columns:[{name:"Process",style:{width:"15.6%"}},{name:"PID",style:{width:"6%"}},{name:"Start",style:{width:"15.6%"},update:"to64BitHex"},{name:"End",style:{width:"15.6%"},update:"to64BitHex"},{name:"Protection",style:{width:"6%"}},{name:"Hexdump",style:{width:"20.6%"}},{name:"Disasm",style:{width:"20.6%"}}]}},ae=(n(20),n(31),function(e){Object(f.a)(n,e);var t=Object(y.a)(n);function n(e){var i;return Object(m.a)(this,n),(i=t.call(this,e)).state={dumpData:{},search:"",pages:null,pagesCopy:null},i.buildPlugin=i.buildPlugin.bind(Object(g.a)(i)),i.buildBasicPluginBox=z.bind(Object(g.a)(i)),i.pluginBoxHeader=R.bind(Object(g.a)(i)),i.pluginDataColumns=V.bind(Object(g.a)(i)),i.pluginContainerFooter=H.bind(Object(g.a)(i)),i.pluginDataBlocksFill=W.bind(Object(g.a)(i)),i.pluginInfo=M.bind(Object(g.a)(i)),i.buildJSONDownloadIcon=_.bind(Object(g.a)(i)),i.infoBox=L.bind(Object(g.a)(i)),i.checkIfSelected=F.bind(Object(g.a)(i)),i.filterSearch=ne.bind(Object(g.a)(i)),i.search=ee.bind(Object(g.a)(i)),i.processFilters=te.bind(Object(g.a)(i)),i.setSearch=X.bind(Object(g.a)(i)),i.changePage=w.bind(Object(g.a)(i)),i.visibleDataBlocks=S.bind(Object(g.a)(i)),i.displayOrder=P.bind(Object(g.a)(i)),i.showLess=D.bind(Object(g.a)(i)),i.showAll=k.bind(Object(g.a)(i)),i}return Object(b.a)(n,[{key:"buildPlugin",value:function(){return this.buildBasicPluginBox(this.props.pluginName,this.props.columns,this.props.info)}},{key:"render",value:function(){var e=this.buildPlugin(this);return null==e?null:Object(c.jsx)("div",{id:"outer-plugin-box",className:this.props.pluginName,children:e})}}],[{key:"getDerivedStateFromProps",value:function(e,t){return null==t.pages?{pages:e.pages,pagesCopy:e.pages,dumpData:e.dumpData,selectedPlugins:e.selectedPlugins,search:e.search}:e.pages!==t.pagesCopy?{pages:e.pages,pagesCopy:e.pages,selectedPlugins:e.selectedPlugins,dumpData:e.dumpData}:t.dumpData.length===e.dumpData.length&&t.dumpData!==e.dumpData||e.search==t.search&&e.pages===t.pagesCopy||e.search!=t.search&&""===e.search?{pages:t.pages,selectedPlugins:e.selectedPlugins,dumpData:t.dumpData}:{pages:t.pages,selectedPlugins:e.selectedPlugins,dumpData:e.dumpData}}}]),n}(a.a.Component)),se='\n<h2>Search how-to</h2>\n<h3>Operators</h3>\n<p>Search strings are combined with logical AND (Whitespace) by default, but can also be combined with logical OR by writing OR between the strings.</p>\n<ol>\n    <li><span style="color:green">PID:"620" OR PID:"800"</span> - Show plugin data block if it contains column PID with either value 620 OR 800</li>\n    <li><span style="color:green">PID:"620" Value:"AMD64"</span> - Show plugin data block if it contains data row that has column PID with value 620 AND another column Value with value AMD64. (<b>NOTE</b>: Value is column name like Process, PID, Modules, Offset etc. and has nothing to do with search syntax)</li>\n</ol>\n<h3>Regex</h3>\n<p>Quotation mark and free search use regex, so it is important to know special regex characters which are <b>. + * ? ^ $ ( ) [ ] { } | \\</b> . If any these marks are part of the value you are searching, you should comment the mark out using <b>\\</b>, which is one of the special characters, so the same policy applies to it as well.</p>\n<ol>\n    <li><span style="color:green">Path:"C:\\\\Windows\\\\System32\\\\kernel32\\.dll"</span> - Show plugin data blocks that have column Path that contains value C:\\Windows\\System32\\kernel32.dll. <b>NOTE:</b> Commenting dot is usually not needed since it applies to any character except newline in regex syntax.</li>\n    <li><span style="color:green">"File Path":"\\[vdso\\]"</span> - Show plugin data blocks that contain column File Path with value [vdso].</li>\n</ol>\n<h3>Quotation marks</h3>\n<p>Strings that are surrounded by quotation marks are compared to values in each column in each plugin. This search uses regex, so all regex marks should be commented. Quotation marks that are part of the value should also be commented using \\, so the value can be parsed correctly.</p>\n<ol>\n    <li><span style="color:green">"/dev/*"</span> - Show plugin data blocks if any column contains value that starts with /dev/</li>\n    <li><span style="color:green">Variable:"EXAMPLE" Value:"\\[\\"text\\"\\]"</span> - Show plugin data block if it contains data row that has column Variable with value EXAMPLE AND column Value with value ["text"].</li>\n</ol>\n<h3>Free search</h3>\n<p>Strings that are not surrounded by quotation marks are parsed mostly the sameway as strings surrounded by quotation marks.</p>\n<p>Difference is that non-quotation marked strings are separated by whitespaces, so values can\'t contain any whitespaces and non-quotation marked strings target all columns, so they cannot be used to target single column name by using column name as prefix (e.g. <span style="color:green">PID:1000</span> would search all columns for value PID:1000).</sp>\n<ol>\n    <li><span style="color:green">*\\.ps1</span> - Show plugin data block if any column contains value that ends with .ps1.</li>\n    <li><span style="color:green">VBoxClient*</span> - Show plugin data block that contains any column with value starting with VBoxClient.</li>\n</ol>\n<h3>Ranges</h3>\n<p>Range filters can be used to search <b>numerical</b> data within certain range. Range needs to always have a prefix containing column name which is targeted. Range syntax is: <span style="color:green">column:(startvalue-endvalue)</span>. No whitespaces inside brackets are allowed.</p>\n<ol>\n    <li><span style="color:green">Offset:(0x0000850000036750-0x00008F03C0E483B0)</span> - Show plugin data blocks that contain column Offset which has value between 0x0000850000036750 and 0x00008F03C0E483B0.</li>\n    <li><span style="color:green">PID:(50-1000)</span> - Show plugin data blocks that contain column PID which has value between 50 and 1000.</li>\n</ol>\n<h3>Column names</h3>\n<p> Column names before the actual value tell which column is being targeted. Currently there is no way to specify an individual plugin with certain value. e.g. if search is: <span style="color:green">PID:"500"</span>, all plugins with column PID are targeted. If column name contains whitespaces, it can be surrounded by quotation marks. Column name can not be specified when using free search.</p>\n<ol>\n    <li><span style="color:green">"Last Write Time":"2019-09-18*"</span> - Show plugin data blocks that contain column Last Write Time with value starting with 2019-09-18</li>\n</ol>\n<h3>Negating search</h3>\n<p>Negating search can be used to remove out some results from search. It works the opposite way as regular search. Other than nested and free search can be turned into negating search by adding - front of the search string.</p>\n<ol>\n    <li><span style="color:green">-Offset:(0x0000850000036750-0x00008F03C0E483B0)</span> - Show plugin data blocks that do not contain ANY columns with Offset which has value between 0x0000850000036750 and 0x00008F03C0E483B0. This maybe works for one plugin with Offset column, but some other plugins do not have Offset column, so all those plugins data blocks are shown.</li>\n    <li><span style="color:green">-"*a*" OR -"*0*"</span> - Show plugin data block if it does not contain any a or 0 characters under any column</li>\n</ol>\n<h3>Nested search</h3>\n<p>Nested searches can be used to do more complex searches. In nested search, search strings are put inside brackets turning them into a group. If range search is used inside nested search, closing bracket ) at the end of the search has to be commented out. Currently nested search doesn\'t support negating searches and other nests inside nest.</p>\n<p><b>NOTE:</b> nested searches can be very heavy to browser if several of them occur in same search string!</p>\n<ol>\n    <li><span style="color:green">(Process:"smss.exe" Variable:"*SystemDrive*") OR (Module:"Wd*" -Type:"KeBugCheckReasonCallbackListHead")</span> - Show plugin data blocks that contain (column Process with value smss.exe AND column Variable containing SystemDrive somewhere within value) OR (column Module which has value starting with Wd*, but that row does not have column Type with value KeBugCheckReasonCallbackListHead).</li>\n    <li><span style="color:green">Process:"lsass.exe" (Base:(0x00007FF7F1460000-0x00007FF993D40000\\) OR Variable:"*")</span> - Show plugin data blocks that contain column Process with value lsass.exe AND (column Base with value between 0x00007FF7F1460000 and 0x00007FF993D40000 OR column Variable with any value)</li>\n</ol>\n<h2>Data blocks</h2>\n<p>Data blocks menu lets user select how many rows of data are displayed in each plugin. Most of the plugins also have their own individual setting for this.</p>\n<h2>Plugin selection and categories</h2>\n<p>By default, all plugin results are displayed to user when she opens some dump\'s analysis page. Any plugin\'s results can be filtered out by deselecting them from menu that contains all plugin names. Plugins can be reselected from the same menu if their results are needed at some point again.</p>\n<p>There is also plugin category menu, which lets user select the category of plugins resulting in showing plugins only in that particular category.</p>\n<h2>JSON download</h2>\n<p>Plugin output can be downloaded as JSON by clicking <img id="info-box-image" src="images/json-download.svg" />-icon in plugin header. <b>NOTE:</b> Your browser may not be able to download all of the JSON data if it takes too much space.</p>\n',le=(n(25),[{value:"basicdetails",label:"basicdetails"},{value:"check_afinfo",label:"check_afinfo"},{value:"check_creds",label:"check_creds"},{value:"check_idt",label:"check_idt"},{value:"check_modules",label:"check_modules"},{value:"check_syscall",label:"check_syscall"},{value:"elfs",label:"elfs"},{value:"keyboard_notifiers",label:"keyboard_notifiers"},{value:"lsmod",label:"lsmod"},{value:"lsof",label:"lsof"},{value:"malfind",label:"malfind"},{value:"maps",label:"maps"},{value:"pslist",label:"pslist"},{value:"tty_check",label:"tty_check"}]),oe={container:function(e){return Object(q.a)(Object(q.a)({},e),{},{width:300,"@media screen and (max-width: 1700px)":Object(q.a)(Object(q.a)({},e["@media only screen and (max-width: 1700px)"]),{},{width:200,marginLeft:10})})},control:function(e,t){return Object(q.a)(Object(q.a)({},e),{},{width:300,whiteSpace:"nowrap",overflow:"hidden",maxHeight:t.menuIsOpen?"none":30,"@media screen and (max-width: 1700px)":Object(q.a)(Object(q.a)({},e["@media only screen and (max-width: 1700px)"]),{},{width:200})})},indicatorsContainer:function(e,t){return Object(q.a)(Object(q.a)({},e),{},{maxHeight:t.menuIsOpen?"none":40})},menu:function(e){return Object(q.a)(Object(q.a)({},e),{},{width:300,"@media screen and (max-width: 1700px)":Object(q.a)(Object(q.a)({},e["@media only screen and (max-width: 1700px)"]),{},{width:200})})}},re=function(e){Object(f.a)(n,e);var t=Object(y.a)(n);function n(e){var i;return Object(m.a)(this,n),(i=t.call(this,e)).handleChange=function(e){i.setState({selectedPlugins:e}),console.log("Option selected:",e)},i.state={dumpData:{},search:"",pageDetails:{pages:{}},selectedPlugins:le,pluginCategory:"all"},i.buildPage=i.buildPage.bind(Object(g.a)(i)),i.pageHeader=B.bind(Object(g.a)(i)),i.buildHeaderBlocksMenu=T.bind(Object(g.a)(i)),i.buildPluginCheckBox=i.buildPluginCheckBox.bind(Object(g.a)(i)),i.buildPluginCategoryMenu=i.buildPluginCategoryMenu.bind(Object(g.a)(i)),i.basicLinuxDetails=i.basicLinuxDetails.bind(Object(g.a)(i)),i.buildBasicPluginBox=z.bind(Object(g.a)(i)),i.pluginBoxHeader=R.bind(Object(g.a)(i)),i.pluginDataColumns=V.bind(Object(g.a)(i)),i.pluginContainerFooter=H.bind(Object(g.a)(i)),i.pluginDataBlocksFill=W.bind(Object(g.a)(i)),i.pluginInfo=M.bind(Object(g.a)(i)),i.infoBox=L.bind(Object(g.a)(i)),i.buildJSONDownloadIcon=_.bind(Object(g.a)(i)),i.DOMParserInfoBox=E.bind(Object(g.a)(i)),i.checkIfSelected=F.bind(Object(g.a)(i)),i.pickSelectedPlugins=i.pickSelectedPlugins.bind(Object(g.a)(i)),i.filterSearch=ne.bind(Object(g.a)(i)),i.searchBar=Y.bind(Object(g.a)(i)),i.search=ee.bind(Object(g.a)(i)),i.processFilters=te.bind(Object(g.a)(i)),i.setSearch=X.bind(Object(g.a)(i)),i.to64BitHex=C.bind(Object(g.a)(i)),i.bytesToSize=N.bind(Object(g.a)(i)),i.toHex=I.bind(Object(g.a)(i)),i.changePage=w.bind(Object(g.a)(i)),i.displayOrder=P.bind(Object(g.a)(i)),i.showLess=D.bind(Object(g.a)(i)),i.showAll=k.bind(Object(g.a)(i)),i.visibleDataBlocks=S.bind(Object(g.a)(i)),i.allVisibleDataBlocks=A.bind(Object(g.a)(i)),i}return Object(b.a)(n,[{key:"buildPluginCheckBox",value:function(){var e=this.state.selectedPlugins;return Object(c.jsx)(K.a,{autoFocus:!0,isMulti:!0,placeholder:"Remove plugins",className:"plugin-select",value:e,onChange:this.handleChange,options:le,closeMenuOnSelect:!1,hideSelectedOptions:!0,allowSelectAll:!0,styles:oe})}},{key:"buildPage",value:function(){var e=[];e.push(this.pageHeader(se)),e.push(this.basicLinuxDetails());var t=[];for(var n in ie)if(!t.includes(n)&&!1!==this.checkIfSelected(this.state.selectedPlugins,n)){var i=this.search(this.state.dumpData[n]);try{if(0===i.length||null==i||"ERROR"===i||"UNSATISFIED"===i)continue}catch(a){continue}e.push(Object(c.jsx)(ae,{dumpData:i,pages:this.state.pageDetails.pages[n],selectedPlugins:this.state.selectedPlugins,pluginName:n,columns:ie[n].columns,info:ie[n].info,search:this.state.search}))}return e}},{key:"pickSelectedPlugins",value:function(e){var t=[];"all"===e?t=le:"processes"===e?t=[{value:"pslist",label:"pslist"},{value:"lsof",label:"lsof"},{value:"elfs",label:"elfs"},{value:"check_creds",label:"check_creds"},{value:"maps",label:"maps"}]:"kernel"===e?t=[{value:"check_afinfo",label:"check_afinfo"},{value:"check_idt",label:"check_idt"},{value:"check_syscall",label:"check_syscall"},{value:"tty_check",label:"tty_check"},{value:"keyboard_notifiers",label:"keyboard_notifiers"}]:"modules"===e?t=[{value:"check_modules",label:"check_modules"},{value:"lsmod",label:"lsmod"}]:"malware"===e&&(t=[{value:"malfind",label:"malfind"}]),this.handleChange(t)}},{key:"buildPluginCategoryMenu",value:function(){var e=this,t=[];return t.push(Object(c.jsxs)("select",{id:"plugin-category-select",onChange:function(t){return e.pickSelectedPlugins(t.target.value)},children:[Object(c.jsx)("option",{disabled:!0,selected:!0,value:!0,children:"Plugin categories"}),Object(c.jsx)("option",{value:"all",children:"All"}),Object(c.jsx)("option",{value:"kernel",children:"Kernel"}),Object(c.jsx)("option",{value:"processes",children:"Processes"}),Object(c.jsx)("option",{value:"modules",children:"Modules"}),Object(c.jsx)("option",{value:"files",children:"Files"})]})),t}},{key:"basicLinuxDetails",value:function(){var e=this,t=[],n="basicdetails",i=this.state.dumpData;if(!1===this.checkIfSelected(this.state.selectedPlugins,n))return null;var a={};try{var s=i.os_info.length;s<40&&(a={"font-size":"25px"}),s>40&&s<250&&(a={"font-size":"18px"})}catch(l){}return t.push(Object(c.jsxs)("div",{id:"basic-details-container",className:"linux",children:[Object(c.jsxs)("div",{id:"header",children:[Object(c.jsx)("img",{src:"images/plugin-info.png",id:"info-button",onClick:function(){return e.pluginInfo(n)}}),this.infoBox(n,"This primary section of the report contains basic information about the dump.\n\n        Under this section is search field and tables for each plugin used on the dump. These tables display data retrieved from the plugin.\n\n        Each plugin section contains information button like this one. Pressing the button displays basic information related to the plugin and its columns.","Basic details"),Object(c.jsx)("div",{id:"header-name",children:"Basic details"})]}),Object(c.jsxs)("div",{id:"details",children:[Object(c.jsxs)("ul",{id:"detail-block",children:[Object(c.jsx)("li",{id:"detail-header",children:"Dump size"}),Object(c.jsx)("li",{id:"detail-data",children:null==i.dumpsize?"-":this.bytesToSize(i.dumpsize)})]}),Object(c.jsxs)("ul",{id:"detail-block",children:[Object(c.jsx)("li",{id:"detail-header",children:"OS details"}),Object(c.jsx)("li",{id:"detail-data",style:a,children:null==i.os_info?"-":i.os_info})]}),Object(c.jsxs)("ul",{id:"detail-block",children:[Object(c.jsx)("li",{id:"detail-header",children:"Processes"}),Object(c.jsx)("li",{id:"detail-data",children:!1===Array.isArray(i.pslist)?"-":i.pslist.length})]}),Object(c.jsxs)("ul",{id:"detail-block",className:"right-side",children:[Object(c.jsx)("li",{id:"detail-header",children:"Kernel modules"}),Object(c.jsx)("li",{id:"detail-data",children:!1===Array.isArray(i.lsmod)?"-":i.lsmod.length})]})]})]})),t}},{key:"render",value:function(){return Object(c.jsx)("div",{id:"linux-dump-page",children:this.buildPage(this)})}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=["_id","os_info","info","currenttime","analyse_state"];if(0===Object.keys(t.pageDetails.pages).length){var i={pages:{}};for(var a in e.dumpData)Array.isArray(e.dumpData[a])&&!(a in n)&&(i.pages[a]={pageNumber:1,showAll:!1,elementsVisible:20});var s=JSON.parse(JSON.stringify(e.dumpData));for(var l in ie)for(var o in ie[l].columns)if("update"in ie[l].columns[o]){if(ie[l].columns[o].update.includes("parseInt"))for(var r in s[l])try{s[l][r][ie[l].columns[o].name]=parseInt(s[l][r][ie[l].columns[o].name])}catch(c){continue}else if(ie[l].columns[o].update.includes("toString"))for(var r in s[l])try{s[l][r][ie[l].columns[o].name]=s[l][r][ie[l].columns[o].name].toString()}catch(c){continue}if(ie[l].columns[o].update.includes("to64BitHex"))for(var r in s[l])try{s[l][r][ie[l].columns[o].name]=C(s[l][r][ie[l].columns[o].name])}catch(c){continue}else if(ie[l].columns[o].update.includes("bytesToSize"))for(var r in s[l])try{s[l][r][ie[l].columns[o].name]=N(s[l][r][ie[l].columns[o].name])}catch(c){continue}else if(ie[l].columns[o].update.includes("toHex"))for(var r in s[l])try{s[l][r][ie[l].columns[o].name]=I(s[l][r][ie[l].columns[o].name])}catch(c){continue}}return{pageDetails:i,dumpData:s}}return{pageDetails:t.pageDetails,dumpData:t.dumpData}}}]),n}(a.a.Component),ce={netscan:{info:"netscan scans for network objects present in windows memory image.\n\n        - PID: Process ID\n\n        - Owner: Process owning the connection.\n\n        - Offset: Connection offset\n\n        - Proto: Connection protocol\n\n        - LocalAddr: Local connection address\n\n        - LocalPort: Local connection port\n\n        - ForeignAddr: Foreign connection address\n\n        - ForeignPort: Foreign connection port\n\n        - State: Current state for TCP connections\n\n        - Created: Connection establishment time\n",columns:[{name:"PID",style:{width:"6%"}},{name:"Owner",style:{width:"16%"}},{name:"Offset",style:{width:"17%"},update:"to64BitHex"},{name:"Proto",style:{width:"6%"}},{name:"LocalAddr",style:{width:"8%"}},{name:"LocalPort",style:{width:"8%"}},{name:"ForeignAddr",style:{width:"10%"}},{name:"ForeignPort",style:{width:"7%"}},{name:"State",style:{width:"7%"}},{name:"Created",style:{"border-right":"none !important",width:"15%"}}]},dlllist:{info:"dlllist displays process's loaded DLLs. It walks the doubly-linked list of _LDR_DATA_TABLE_ENTRY structures which is pointed to by the PEB's InLoadOrderModuleList.\n\n        - PID: Process ID\n\n        - Process: Process name\n\n        - Name: DLL loaded by the process\n\n        - Path: DLL path in file system\n\n        - Base: DLL base address\n\n        - Size: DLL size\n\n        - LoadTime: Timestamp of process loading the DLL",columns:[{name:"PID",style:{width:"10%"}},{name:"Process",style:{width:"16%"}},{name:"Name",style:{width:"16%"}},{name:"Path",style:{width:"16%"}},{name:"Base",style:{width:"16%"},update:"to64BitHex"},{name:"Size",style:{width:"10%"},update:"bytesToSize"},{name:"LoadTime",style:{width:"16%"}}]},psscan:{info:"psscan scans for processes present in memory image.\n\n        - ImageFileName: File which process was created from\n\n        - PID: Process ID\n\n        - PPID: Process parent ID\n\n        - Offset: Process offset\n\n        - Handles: Handles opened\n\n        - Threads: Threads running in the process\n\n        - SessionId: Session ID\n\n        -- empty session ID will likely mean that process has started before smss.exe which is the session manager.\n\n        - File output: File output\n\n        - CreateTime: Time when process was created\n\n        - ExitTime: Time when process ended if it has ended\n\n        - Wow64: 32-bit applications on a 64\u2013bit operating system",columns:[{name:"ImageFileName",style:{width:"10%"}},{name:"PID",style:{width:"10%"}},{name:"PPID",style:{width:"10%"}},{name:"Offset",style:{width:"10%"},update:"to64BitHex"},{name:"Handles",style:{width:"10%"}},{name:"Threads",style:{width:"10%"}},{name:"SessionId",style:{width:"10%"}},{name:"CreateTime",style:{width:"10%"}},{name:"ExitTime",style:{width:"10%"}},{name:"Wow64",style:{width:"10%"},update:"toString"}]},handles:{info:"handles displays open handles in processes. This applies to files, registry keys, mutexes, named pipes, events, window stations, desktops, threads, and all other types of securable executive objects.\n\n        - Offset: Offset of the handle\n\n        - PID: Process id\n\n        - Process: Process name\n\n        - Name: Handle target\n\n        - Type: Type of the handle target\n\n        - GrantedAccess: Details of the granted access\n\n        - HandleValue: Handle value",columns:[{name:"Offset",style:{width:"17.5%"},update:"to64BitHex"},{name:"PID",style:{width:"8%"}},{name:"Process",style:{width:"10%"}},{name:"Name",style:{width:"25%"}},{name:"HandleValue",style:{width:"12%"}},{name:"Type",style:{width:"12%"}},{name:"GrantedAccess",style:{width:"15.5%"},update:"toHex"}]},envars:{info:"envars displays process environment variables.\n\n        - PID: Process ID\n\n        - Process: process name\n\n        - Block: variable location in memory\n\n        - Variable: environment variable name\n\n        - Value: environment variable value\n",columns:[{name:"PID",style:{width:"10%"}},{name:"Process",style:{width:"22.5%"}},{name:"Block",style:{width:"22.5%"}},{name:"Variable",style:{width:"22.5%"}},{name:"Value",style:{width:"22.5%"}}]},callbacks:{info:"callbacks lists kernel callbacks and notification routines\n\n        - Module: Module name\n\n        - Type: Callback type\n\n        - Callback: Callback address \n\n        - Symbol: Symbol name\n\n        - Detail: Details about the callback",columns:[{name:"Module",style:{width:"15%"}},{name:"Type",style:{width:"23.33%"}},{name:"Callback",style:{width:"23.33%"},update:"to64BitHex"},{name:"Symbol",style:{width:"23.33%"}},{name:"Detail",style:{width:"15%"}}]},modscan:{info:"modscan command finds LDR_DATA_TABLE_ENTRY structures by scanning physical memory for pool tags. This can pick up previously unloaded drivers and drivers that have been hidden/unlinked by rootkits. Unlike modules the order of results has no relationship with the order in which the drivers loaded.\n\n        - Offset: Module physical offset\n\n        - Base: Module base address\n\n        - Name: Module name \n\n        - Path: Module path in disk\n\n        - Size: Module size",columns:[{name:"Offset",style:{width:"20%"},update:"to64BitHex"},{name:"Base",style:{width:"20%"},update:"to64BitHex"},{name:"Name",style:{width:"20%"}},{name:"Path",style:{width:"30%"}},{name:"Size",style:{width:"10%"},update:"bytesToSize"}]},modules:{info:"modules lists kernel drivers loaded on the system by walking the doubly-linked list of LDR_DATA_TABLE_ENTRY structures pointed to by PsLoadedModuleList. It cannot find hidden/unlinked kernel drivers, however modscan serves that purpose.\n\n        - Offset: Module physical offset\n\n        - Base: Module base address\n\n        - Name: Module name \n\n        - Path: Module path in disk\n\n        - Size: Module size",columns:[{name:"Offset",style:{width:"20%"},update:"to64BitHex"},{name:"Base",style:{width:"20%"},update:"to64BitHex"},{name:"Name",style:{width:"20%"}},{name:"Path",style:{width:"30%"}},{name:"Size",style:{width:"10%"},update:"bytesToSize"}]},driverscan:{info:"driverscan scans for drivers present in windows memory image.\n\n        - Offset: Physical offset of the _DRIVER_OBJECT structure\n\n        - Name: Device driver or filesystem driver\n\n        - Driver Name: Name of the driver\n\n        - Start: Starting memory address of the driver\n\n        - Service Key: Service key name\n\n        - Size: Driver size",columns:[{name:"Offset",style:{width:"18%"},update:"to64BitHex"},{name:"Name",style:{width:"18%"}},{name:"Driver Name",style:{width:"18%"}},{name:"Start",style:{width:"18%"},update:"to64BitHex"},{name:"Service Key",style:{width:"18%"}},{name:"Size",style:{width:"10%"},update:"bytesToSize"}]},filescan:{info:"filescan finds FILE_OBJECTs in physical memory using pool tag scanning.\n\n        - Name: File name\n\n        - Offset: Physical offset of the FILE_OBJECT\n\n        - Size: FILE_OBJECT size\n",columns:[{name:"Name",style:{width:"40%"}},{name:"Offset",style:{width:"40%"},update:"to64BitHex"},{name:"Size",style:{width:"20%"}}]},getserviceids:{info:"getserviceids calculates the SIDs for services on a dump.\n\n        - Service: Service name\n\n        - SID: Calculated SID for the service",columns:[{name:"Service",style:{width:"25%"}},{name:"SID",style:{width:"75%"}}]},getsids:{info:"getsids shows SIDs (Security Identifiers) associated with processes.\n\n        - PID: Process ID\n\n        - Process: Process name\n\n        - Name: security principal name\n\n        - SID: Security identifier value",columns:[{name:"PID",style:{width:"15%"}},{name:"Process",style:{width:"15%"}},{name:"Name",style:{width:"35%"}},{name:"SID",style:{width:"35%"}}]},privs:{info:"privs lists process token privileges.\n\n        - PID: Process ID\n\n        - Process: Process name\n\n        - Value: Privilege number\n\n        - Attributes: Privilege attributes\n\n        - Privilege: Privilege name\n\n        - Description: Privilege description\n",columns:[{name:"PID",style:{width:"8%"}},{name:"Process",style:{width:"21%"}},{name:"Value",style:{width:"8%"}},{name:"Attributes",style:{width:"21%"}},{name:"Privilege",style:{width:"21%"}},{name:"Description",style:{width:"21%"}}]},svcscan:{info:"svcscan finds windows services from memory dump.\n\n        - Offset: Offset of the service\n\n        - Order: Service boot order value\n\n        - PID: Host process ID\n\n        - Name: Service name\n\n        - Display: Service display name\n\n        - Type: Type of the service\n\n        - Start: Service start option\n\n        -- SERVICE_AUTO_START: A service started automatically by the service control manager during system startup.\n\n        -- SERVICE_BOOT_START: A device driver started by the system loader. This value is valid only for driver services.\n\n        -- SERVICE_DEMAND_START: A service started by the service control manager when a process calls the StartService function.\n\n        -- SERVICE_DISABLED: A service that cannot be started. Attempts to start the service result in the error code ERROR_SERVICE_DISABLED.\n\n        -- SERVICE_SYSTEM_START: A device driver started by the IoInitSystem function. This value is valid only for driver services.\n\n        - State: Current state of the service\n\n        - Binary: Binary path of the service",columns:[{name:"Offset",style:{width:"13.16666%"},update:"to64BitHex"},{name:"Order",style:{width:"7%"}},{name:"PID",style:{width:"7%"}},{name:"Name",style:{width:"13.16666%"}},{name:"Display",style:{width:"13.16666%"}},{name:"Type",style:{width:"13.16666%"}},{name:"Start",style:{width:"13.16666%"}},{name:"State",style:{width:"13.16666%"}},{name:"Binary",style:{width:"7%"}}]},mutantscan:{info:"mutantscan scans for mutexes present in windows memory image.\n\n        - Offset: Offset of the mutex\n\n        - Name: Mutant name",columns:[{name:"Offset",style:{width:"35%"},update:"to64BitHex"},{name:"Name",style:{width:"65%"}}]},poolscanner:{info:"Generic poolscanner.\n\n        - Offset: Pool offset\n\n        - Name: Pool header filename\n\n        - Tag: Pool tag\n\n        - Layer: Memory layer",columns:[{name:"Offset",style:{width:"20%"},update:"to64BitHex"},{name:"Name",style:{width:"30%"}},{name:"Tag",style:{width:"30%"}},{name:"Layer",style:{width:"20%"}}]},bigpools:{info:"bigpools lists big page pools.\n\n        - Allocation: Kernel memory address where the allocation begins\n\n        - Tag: Pool tag name\n\n        - PoolType: Type of allocated system memory\n\n        - NumberOfBytes: Amount of allocated bytes",columns:[{name:"Allocation",style:{width:"26%"},update:["parseInt","to64BitHex"]},{name:"Tag",style:{width:"23%"}},{name:"PoolType",style:{width:"26%"}},{name:"NumberOfBytes",style:{width:"23%"},update:"bytesToSize"}]},driverirp:{info:"driverirp lists IRPs for drivers.\n\n        - Offset: IRP function offset\n\n        - Driver Name: Driver name\n\n        - IRP: IRP name\n\n        - Address: Driver address\n\n        - Module: Module name\n\n        - Symbol: Symbol name",columns:[{name:"Offset",style:{width:"16.666%"},update:"to64BitHex"},{name:"Driver Name",style:{width:"16.666%"}},{name:"IRP",style:{width:"16.666%"}},{name:"Address",style:{width:"16.666%"},update:"to64BitHex"},{name:"Module",style:{width:"16.666%"}},{name:"Symbol",style:{width:"16.666%"}}]},verinfo:{info:"verinfo lists version information from PE files.\n\n        - PID: Process ID\n\n        - Process: Process name\n\n        - Base: Base address of the PE\n\n        - Name: File name\n\n        - Major: Major version\n\n        - Minor: Minor version\n\n        - Product: Product number\n\n        - Build: Build number",columns:[{name:"PID",style:{width:"10%"}},{name:"Process",style:{width:"16.6666%"}},{name:"Base",style:{width:"16.6666%"},update:"to64BitHex"},{name:"Name",style:{width:"16.6666%"}},{name:"Major",style:{width:"10%"}},{name:"Minor",style:{width:"10%"}},{name:"Product",style:{width:"10%"}},{name:"Build",style:{width:"10%"}}]},symlinkscan:{info:"symlinkscan scans for symbolic link objects and outputs their information.\n\n        - Offset: Process ID\n\n        - CreateTime: Symbolic link creation time\n\n        - From Name: Original name\n\n        - To Name: Target name",columns:[{name:"Offset",style:{width:"20%"},update:"to64BitHex"},{name:"CreateTime",style:{width:"20%"}},{name:"From Name",style:{width:"30%"}},{name:"To Name",style:{width:"30%"}}]},userassist:{info:"userassist finds UserAssist keys from image.\n\n        - Hive Offset: Offset of the key\n\n        - Hive Name: Hive name\n\n        - Path: Key path\n\n        - Last Write Time: Last write time\n\n        - Type: Data type\n\n        - Name: Entry name\n\n        - ID: Session ID\n\n        - Count: Number of times the application was ran\n\n        - Focus Count: Number of times the application has been focused into\n\n        - Time Focused: Total time the application has been focused\n\n        - Last Updated: Last time the application was ran",columns:[{name:"Hive Offset",style:{width:"10.8333%"},update:"to64BitHex"},{name:"Hive Name",style:{width:"10.8333%"}},{name:"Path",style:{width:"10.8333%"}},{name:"Last Write Time",style:{width:"10.8333%"}},{name:"Type",style:{width:"7%"}},{name:"Name",style:{width:"10.8333%"}},{name:"ID",style:{width:"7%"}},{name:"Count",style:{width:"7%"}},{name:"Focus Count",style:{width:"7%"}},{name:"Time Focused",style:{width:"7%"}},{name:"Last Updated",style:{width:"10.8333%"}}]},printkey:{info:"printkey searches all hives and prints key information. This plugin has been run with default settings.\n\n        - Hive Offset: Hive offset\n\n        - Key: Key name\n\n        - Name: Entry name\n\n        - Type: Data type\n\n        - Last Write Time: Last time modified\n\n        - Volatile: Tells if keys or subkeys are either stable or volatile\n\n        - Data: Entry data (Most likely always empty because no specific key is targeted)",columns:[{name:"Hive Offset",style:{width:"16.8%"},update:"to64BitHex"},{name:"Key",style:{width:"16.8%"}},{name:"Name",style:{width:"16.8%"}},{name:"Type",style:{width:"8%"}},{name:"Last Write Time",style:{width:"16.8%"}},{name:"Volatile",style:{width:"8%"},update:"toString"},{name:"Data",style:{width:"16.8%"}}]},virtmap:{info:"virtmap lists virtual mapped sections.\n\n        - Region: Region name\n\n        - Start offset: Section starting offset\n\n        - End offset: Section ending offset",columns:[{name:"Region",style:{width:"30%"}},{name:"Start offset",style:{width:"35%"},update:"to64BitHex"},{name:"End offset",style:{width:"35%"},update:"to64BitHex"}]},vadinfo:{info:"vadinfo displays extended information about a process's VAD nodes.\n\n        - PID: Process ID\n\n        - Process: Process name\n\n        - Offset: VAD offset\n\n        - Start VPN: Starting virtual addresses in process memory that the MMVAD structure pertains to\n\n        - End VPN: Ending virtual addresses in process memory that the MMVAD structure pertains to\n\n        - Tag: VAD tag\n\n        - Protection: Memory protection\n\n        - CommitCharge: This value specifies the number of committed pages in the region\n\n        - PrivateMemory: Committed regions that cannot be shared with other processes\n\n        - Parent: Parent node address\n\n        - File: File path",columns:[{name:"PID",style:{width:"6%"}},{name:"Process",style:{width:"13%"}},{name:"Offset",style:{width:"10%"},update:"to64BitHex"},{name:"Start VPN",style:{width:"10%"},update:"to64BitHex"},{name:"End VPN",style:{width:"10%"},update:"to64BitHex"},{name:"Tag",style:{width:"6%"}},{name:"CommitCharge",style:{width:"6%"}},{name:"Protection",style:{width:"10%"}},{name:"PrivateMemory",style:{width:"6%"}},{name:"Parent",style:{width:"10%"},update:["parseInt","to64BitHex"]},{name:"File",style:{width:"13%"}}]},hivelist:{info:"hivelist locates virtual addresses of registry hives in memory.\n\n        - Offset: Hive offset\n\n        - FileFullPath: Hive path on disk",columns:[{name:"Offset",style:{width:"30%"},update:"to64BitHex"},{name:"FileFullPath",style:{width:"70%"}}]},ssdt:{info:"ssdt lists system call table.\n\n        - Index: SSDT index number\n\n        - Address: SSDT location in memory\n\n        - Module: Module owning the SSDT\n\n        - Symbol: SSDT name\n",columns:[{name:"Index",style:{width:"10%"}},{name:"Address",style:{width:"30%"},update:"to64BitHex"},{name:"Module",style:{width:"30%"}},{name:"Symbol",style:{width:"30%"}}]},malfind:{info:"malfind lists process memory ranges that potentially contain injected code. It looks for mappings with certain protection bits and displays the matching mappings.\n\n        - Process: Process name\n\n        - PID: Process ID\n\n        - Start VPN: Starting virtual address in the process memory\n\n        - End VPN: Ending virtual address in the process memory\n\n        - PrivateMemory: Private memory bit value\n\n        - Protection: Describes what kind of access is permitted to this memory area.\n\n        - Tag: VAD Tag\n\n        - CommitCharge: specifies the number of pages committed in the region described by the\n        VAD node\n\n        - Hexdump: Preview hexdump from the memory\n\n        - Disasm: Preview disassembled if possible\n",columns:[{name:"Process",style:{width:"14%"}},{name:"PID",style:{width:"6%"}},{name:"Start VPN",style:{width:"11%"},update:"to64BitHex"},{name:"End VPN",style:{width:"11%"},update:"to64BitHex"},{name:"PrivateMemory",style:{width:"7%"}},{name:"Protection",style:{width:"11%"}},{name:"Tag",style:{width:"6%"}},{name:"CommitCharge",style:{width:"6%"}},{name:"Hexdump",style:{width:"14%"}},{name:"Disasm",style:{width:"14%"}}]},info:{info:"info shows OS & kernel details of the memory sample being analyzed.\n\n        - Kernel Base: Kernel base virtual offset\n\n        - DTB: Directory Table Base which contains list of processes page tables\n\n        - Is64BIt: Is the system 64-bit\n\n        - IsPAE: Are physical address extensions enabled\n\n        - Primary: Primary layer name\n\n        - Memory Layer: Memory layer name\n\n        - KdVersionBlock: Kernel debugger data block \n\n        - Major/Minor: Major and minor build numbers\n\n        - Machine Type: Specifies the machine's CPU architecture\n\n        - KeNumberProcessors: Number of processors in the system\n\n        - NtSystemRoot: directory where the core of Windows operating systems files are stored\n\n        - NtProductType: indicates the Windows product type\n\n        - NtMajorVersion: Major OS version\n\n        - NtMinorVersion: Minor OS version\n\n        - PE Major Operating System Version: Major version number of the required operating system\n\n        - PE Major Operating System Version: Minor version number of the required operating system\n\n        - PE Machine: Type of target machine\n\n        - PE Time Date Stamp: Indicates when the file was created\n"}},de=(n(34),function(e){Object(f.a)(n,e);var t=Object(y.a)(n);function n(e){var i;return Object(m.a)(this,n),(i=t.call(this,e)).state={dumpData:{},pages:null,pagesCopy:null,search:""},i.buildPlugin=i.buildPlugin.bind(Object(g.a)(i)),i.buildBasicPluginBox=z.bind(Object(g.a)(i)),i.pluginBoxHeader=R.bind(Object(g.a)(i)),i.pluginDataColumns=V.bind(Object(g.a)(i)),i.pluginContainerFooter=H.bind(Object(g.a)(i)),i.pluginDataBlocksFill=W.bind(Object(g.a)(i)),i.pluginInfo=M.bind(Object(g.a)(i)),i.buildJSONDownloadIcon=_.bind(Object(g.a)(i)),i.infoBox=L.bind(Object(g.a)(i)),i.checkIfSelected=F.bind(Object(g.a)(i)),i.filterSearch=ne.bind(Object(g.a)(i)),i.search=ee.bind(Object(g.a)(i)),i.processFilters=te.bind(Object(g.a)(i)),i.setSearch=X.bind(Object(g.a)(i)),i.changePage=w.bind(Object(g.a)(i)),i.visibleDataBlocks=S.bind(Object(g.a)(i)),i.displayOrder=P.bind(Object(g.a)(i)),i.showLess=D.bind(Object(g.a)(i)),i.showAll=k.bind(Object(g.a)(i)),i}return Object(b.a)(n,[{key:"buildPlugin",value:function(){return this.buildBasicPluginBox(this.props.pluginName,this.props.columns,this.props.info)}},{key:"render",value:function(){var e=this.buildPlugin(this);return null==e?null:Object(c.jsx)("div",{id:"outer-plugin-box",className:this.props.pluginName,children:e},"outerpluginbox"+this.props.pluginName)}}],[{key:"getDerivedStateFromProps",value:function(e,t){return null==t.pages?{pages:e.pages,pagesCopy:e.pages,dumpData:e.dumpData,selectedPlugins:e.selectedPlugins,search:e.search}:e.pages!==t.pagesCopy?{pages:e.pages,pagesCopy:e.pages,selectedPlugins:e.selectedPlugins,dumpData:e.dumpData}:t.dumpData.length===e.dumpData.length&&t.dumpData!==e.dumpData||e.search==t.search&&e.pages===t.pagesCopy||e.search!=t.search&&""===e.search?{pages:t.pages,selectedPlugins:e.selectedPlugins,dumpData:t.dumpData}:{pages:t.pages,selectedPlugins:e.selectedPlugins,dumpData:e.dumpData}}}]),n}(a.a.Component)),ue=[{value:"basicdetails",label:"basicdetails"},{value:"bigpools",label:"bigpools"},{value:"callbacks",label:"callbacks"},{value:"dlllist",label:"dlllist"},{value:"driverirp",label:"driverirp"},{value:"driverscan",label:"driverscan"},{value:"envars",label:"envars"},{value:"filescan",label:"filescan"},{value:"getserviceids",label:"getserviceids"},{value:"getsids",label:"getsids"},{value:"handles",label:"handles"},{value:"hivelist",label:"hivelist"},{value:"info",label:"info"},{value:"malfind",label:"malfind"},{value:"modscan",label:"modscan"},{value:"modules",label:"modules"},{value:"mutantscan",label:"mutantscan"},{value:"netscan",label:"netscan"},{value:"poolscanner",label:"poolscanner"},{value:"printkey",label:"printkey"},{value:"privs",label:"privs"},{value:"psscan",label:"psscan"},{value:"ssdt",label:"ssdt"},{value:"svcscan",label:"svcscan"},{value:"symlinkscan",label:"symlinkscan"},{value:"userassist",label:"userassist"},{value:"vadinfo",label:"vadinfo"},{value:"verinfo",label:"verinfo"},{value:"virtmap",label:"virtmap"}],he={container:function(e){return Object(q.a)(Object(q.a)({},e),{},{width:300,"@media screen and (max-width: 1700px)":Object(q.a)(Object(q.a)({},e["@media only screen and (max-width: 1700px)"]),{},{width:200,marginLeft:10})})},control:function(e,t){return Object(q.a)(Object(q.a)({},e),{},{width:300,whiteSpace:"nowrap",overflow:"hidden",maxHeight:t.menuIsOpen?"none":30,"@media screen and (max-width: 1700px)":Object(q.a)(Object(q.a)({},e["@media only screen and (max-width: 1700px)"]),{},{width:200})})},indicatorsContainer:function(e,t){return Object(q.a)(Object(q.a)({},e),{},{maxHeight:t.menuIsOpen?"none":40})},menu:function(e){return Object(q.a)(Object(q.a)({},e),{},{width:300,"@media screen and (max-width: 1700px)":Object(q.a)(Object(q.a)({},e["@media only screen and (max-width: 1700px)"]),{},{width:200})})}},pe=function(e){Object(f.a)(n,e);var t=Object(y.a)(n);function n(e){var i;return Object(m.a)(this,n),(i=t.call(this,e)).handleChange=function(e){i.setState({selectedPlugins:e}),console.log("Option selected:",e)},i.state={dumpData:{},search:"",pageDetails:{pages:{}},selectedPlugins:ue,pluginCategory:"all"},i.buildPage=i.buildPage.bind(Object(g.a)(i)),i.pageHeader=B.bind(Object(g.a)(i)),i.buildHeaderBlocksMenu=T.bind(Object(g.a)(i)),i.buildPluginCheckBox=i.buildPluginCheckBox.bind(Object(g.a)(i)),i.buildPluginCategoryMenu=i.buildPluginCategoryMenu.bind(Object(g.a)(i)),i.basicWindowsDetails=i.basicWindowsDetails.bind(Object(g.a)(i)),i.buildBasicPluginBox=z.bind(Object(g.a)(i)),i.info=i.info.bind(Object(g.a)(i)),i.pluginBoxHeader=R.bind(Object(g.a)(i)),i.pluginDataColumns=V.bind(Object(g.a)(i)),i.pluginContainerFooter=H.bind(Object(g.a)(i)),i.pluginDataBlocksFill=W.bind(Object(g.a)(i)),i.DOMParserInfoBox=E.bind(Object(g.a)(i)),i.pluginInfo=M.bind(Object(g.a)(i)),i.infoBox=L.bind(Object(g.a)(i)),i.buildJSONDownloadIcon=_.bind(Object(g.a)(i)),i.checkIfSelected=F.bind(Object(g.a)(i)),i.pickSelectedPlugins=i.pickSelectedPlugins.bind(Object(g.a)(i)),i.filterSearch=ne.bind(Object(g.a)(i)),i.searchBar=Y.bind(Object(g.a)(i)),i.search=ee.bind(Object(g.a)(i)),i.processFilters=te.bind(Object(g.a)(i)),i.setSearch=X.bind(Object(g.a)(i)),i.toHex=I.bind(Object(g.a)(i)),i.to64BitHex=C.bind(Object(g.a)(i)),i.bytesToSize=N.bind(Object(g.a)(i)),i.allVisibleDataBlocks=A.bind(Object(g.a)(i)),i}return Object(b.a)(n,[{key:"buildPluginCheckBox",value:function(){var e=this.state.selectedPlugins;return Object(c.jsx)(K.a,{autoFocus:!0,isMulti:!0,placeholder:"Remove plugins",className:"plugin-select",value:e,onChange:this.handleChange,options:ue,closeMenuOnSelect:!1,hideSelectedOptions:!0,allowSelectAll:!0,styles:he})}},{key:"buildPage",value:function(){var e=[];e.push(this.pageHeader(se)),e.push(this.basicWindowsDetails()),e.push(this.info());var t=["info"];for(var n in ce)if(!t.includes(n)&&!1!==this.checkIfSelected(this.state.selectedPlugins,n)){var i=this.search(this.state.dumpData[n]);try{if(0===i.length||null==i||"ERROR"===i||"UNSATISFIED"===i)continue}catch(a){continue}e.push(Object(c.jsx)(de,{dumpData:i,pages:this.state.pageDetails.pages[n],selectedPlugins:this.state.selectedPlugins,pluginName:n,columns:ce[n].columns,info:ce[n].info,search:this.state.search}))}return e}},{key:"pickSelectedPlugins",value:function(e){var t=[];"all"===e?t=ue:"processes"===e?t=[{value:"envars",label:"envars"},{value:"handles",label:"handles"},{value:"malfind",label:"malfind"},{value:"mutantscan",label:"mutantscan"},{value:"privs",label:"privs"},{value:"psscan",label:"psscan"},{value:"vadinfo",label:"vadinfo"}]:"kernel"===e?t=[{value:"bigpools",label:"bigpools"},{value:"callbacks",label:"callbacks"},{value:"poolscanner",label:"poolscanner"},{value:"ssdt",label:"ssdt"},{value:"virtmap",label:"virtmap"}]:"network"===e?t=[{value:"netscan",label:"netscan"},{value:"netstat",label:"netstat"}]:"modules"===e?t=[{value:"driverirp",label:"driverirp"},{value:"driverscan",label:"driverscan"},{value:"modscan",label:"modscan"},{value:"modules",label:"modules"}]:"services"===e?t=[{value:"getserviceids",label:"getserviceids"},{value:"getsids",label:"getsids"},{value:"svcscan",label:"svcscan"}]:"registry"===e?t=[{value:"hivelist",label:"hivelist"},{value:"printkey",label:"printkey"},{value:"userassist",label:"userassist"}]:"files"===e&&(t=[{value:"dlllist",label:"dlllist"},{value:"filescan",label:"filescan"},{value:"symlinkscan",label:"symlinkscan"},{value:"verinfo",label:"verinfo"}]),this.handleChange(t)}},{key:"buildPluginCategoryMenu",value:function(){var e=this,t=[];return t.push(Object(c.jsxs)("select",{id:"plugin-category-select",onChange:function(t){return e.pickSelectedPlugins(t.target.value)},children:[Object(c.jsx)("option",{disabled:!0,value:!0,children:"Plugin categories"}),Object(c.jsx)("option",{value:"all",children:"All"}),Object(c.jsx)("option",{value:"kernel",children:"Kernel"}),Object(c.jsx)("option",{value:"processes",children:"Processes"}),Object(c.jsx)("option",{value:"modules",children:"Modules"}),Object(c.jsx)("option",{value:"network",children:"Network"}),Object(c.jsx)("option",{value:"services",children:"Services"}),Object(c.jsx)("option",{value:"registry",children:"Registry"}),Object(c.jsx)("option",{value:"files",children:"Files"})]})),t}},{key:"basicWindowsDetails",value:function(){var e=this,t=[],n="basicdetails",i=this.state.dumpData;if(!1===this.checkIfSelected(this.state.selectedPlugins,n))return null;try{var a=i.os_info.os+" "+i.os_info.ProductType+" "+i.os_info.NtMajorVersion+"."+i.os_info.NtMinorVersion}catch(s){a="-"}return t.push(Object(c.jsxs)("div",{id:"basic-details-container",className:"windows",children:[Object(c.jsxs)("div",{id:"header",children:[Object(c.jsx)("img",{src:"images/plugin-info.png",id:"info-button",onClick:function(){return e.pluginInfo(n)}}),this.infoBox(n,"This primary section of the report contains basic information about the dump.\n\n        Under this section is search field and tables for each plugin used on the dump. These tables display data retrieved from the plugin.\n\n        Each plugin section contains information button like this one. Pressing the button displays basic information related to the plugin and its columns.","Basic details"),Object(c.jsx)("div",{id:"header-name",children:"Basic details"})]}),Object(c.jsxs)("div",{id:"details",children:[Object(c.jsxs)("ul",{id:"detail-block",children:[Object(c.jsx)("li",{id:"detail-header",children:"System Name"}),Object(c.jsx)("li",{id:"detail-data",children:null==i.name?"-":i.name})]}),Object(c.jsxs)("ul",{id:"detail-block",children:[Object(c.jsx)("li",{id:"detail-header",children:"Dump size"}),Object(c.jsx)("li",{id:"detail-data",children:null==i.dumpsize?"-":this.bytesToSize(i.dumpsize)})]}),Object(c.jsxs)("ul",{id:"detail-block",children:[Object(c.jsx)("li",{id:"detail-header",children:"OS"}),Object(c.jsx)("li",{id:"detail-data",children:a})]}),Object(c.jsxs)("ul",{id:"detail-block",children:[Object(c.jsx)("li",{id:"detail-header",children:"Processes"}),Object(c.jsx)("li",{id:"detail-data",children:!1===Array.isArray(i.psscan)?"-":i.psscan.length})]}),Object(c.jsxs)("ul",{id:"detail-block",className:"right-side",children:[Object(c.jsx)("li",{id:"detail-header",children:"Kernel modules"}),Object(c.jsx)("li",{id:"detail-data",children:!1===Array.isArray(i.modscan)?"-":i.modscan.length})]})]})]})),t}},{key:"info",value:function(){var e=[],t="info",n=this.state.dumpData.info;if(!1===this.checkIfSelected(this.state.selectedPlugins,t))return null;n=this.search(n);try{if(0===n.length)return null}catch(s){return null}try{var i=ce.info.info,a=n.filter((function(e){return"Symbols"!=e.Variable}))}catch(s){return null}return e.push(Object(c.jsxs)("div",{id:"plugin-box",className:t,children:[this.pluginBoxHeader(t,i),Object(c.jsx)("table",{id:"plugin-container",className:t,children:Object(c.jsx)("tbody",{children:a.map((function(e,t){return Object(c.jsxs)("tr",{id:"info-block",children:[Object(c.jsx)("th",{id:"info-column",children:e.Variable},"info info-column"+t),Object(c.jsx)("td",{id:"info-value",children:e.Value},"info info-value"+t)]},"info info-block"+t)}))},"plugin-container tbodyinfo")},"plugin-containerinfo")]},"pluginboinfo")),e}},{key:"render",value:function(){return Object(c.jsx)("div",{id:"windows-dump-page",children:this.buildPage(this)})}}],[{key:"getDerivedStateFromProps",value:function(e,t){var n=["_id","os_info","info","currenttime","analyse_state"];if(0===Object.keys(t.pageDetails.pages).length){var i={pages:{}};for(var a in e.dumpData)Array.isArray(e.dumpData[a])&&!(a in n)&&(i.pages[a]={pageNumber:1,showAll:!1,elementsVisible:20});var s=JSON.parse(JSON.stringify(e.dumpData));for(var l in ce)for(var o in ce[l].columns)if("update"in ce[l].columns[o]){if(ce[l].columns[o].update.includes("parseInt"))for(var r in s[l])try{s[l][r][ce[l].columns[o].name]=parseInt(s[l][r][ce[l].columns[o].name])}catch(c){continue}else if(ce[l].columns[o].update.includes("toString"))for(var r in s[l])try{s[l][r][ce[l].columns[o].name]=s[l][r][ce[l].columns[o].name].toString()}catch(c){continue}if(ce[l].columns[o].update.includes("to64BitHex"))for(var r in s[l])try{s[l][r][ce[l].columns[o].name]=C(s[l][r][ce[l].columns[o].name])}catch(c){continue}else if(ce[l].columns[o].update.includes("bytesToSize"))for(var r in s[l])try{s[l][r][ce[l].columns[o].name]=N(s[l][r][ce[l].columns[o].name])}catch(c){continue}else if(ce[l].columns[o].update.includes("toHex"))for(var r in s[l])try{s[l][r][ce[l].columns[o].name]=I(s[l][r][ce[l].columns[o].name])}catch(c){continue}}return{pageDetails:i,dumpData:s}}return{pageDetails:t.pageDetails,dumpData:t.dumpData}}}]),n}(a.a.Component),me=function(e){Object(f.a)(n,e);var t=Object(y.a)(n);function n(e){var i;return Object(m.a)(this,n),(i=t.call(this,e)).state={basicLinuxData:[],basicWindowsData:[],analyzeMode:!1,analysedDump:[],analysedDumpOS:null,tagColor:"#F68B8B",search:""},i.buildLinuxReports=i.buildLinuxReports.bind(Object(g.a)(i)),i.buildWindowsReports=i.buildWindowsReports.bind(Object(g.a)(i)),i.buildResultsColumns=i.buildResultsColumns.bind(Object(g.a)(i)),i.DOMParserInfoBox=E.bind(Object(g.a)(i)),i.pluginInfo=M.bind(Object(g.a)(i)),i.infoBox=L.bind(Object(g.a)(i)),i.getReports=i.getReports.bind(Object(g.a)(i)),i.reportSearch=Q.bind(Object(g.a)(i)),i.processFilters=te.bind(Object(g.a)(i)),i.filterSearch=ne.bind(Object(g.a)(i)),i.checkReports=$.bind(Object(g.a)(i)),i.removeFilters=Z.bind(Object(g.a)(i)),i.buildInfoPopUp=O.bind(Object(g.a)(i)),i.showInfoPopUp=x.bind(Object(g.a)(i)),i.buildPluginSelectBox=i.buildPluginSelectBox.bind(Object(g.a)(i)),i.selectAllPlugins=i.selectAllPlugins.bind(Object(g.a)(i)),i.runPlugins=i.runPlugins.bind(Object(g.a)(i)),i.getPluginRunStatus=i.getPluginRunStatus.bind(Object(g.a)(i)),i.buildEditBox=i.buildEditBox.bind(Object(g.a)(i)),i.updateDumpData=i.updateDumpData.bind(Object(g.a)(i)),i.chooseTagColor=i.chooseTagColor.bind(Object(g.a)(i)),i.addTag=i.addTag.bind(Object(g.a)(i)),i.buildTags=i.buildTags.bind(Object(g.a)(i)),i.removeTag=i.removeTag.bind(Object(g.a)(i)),i.tagToSearch=i.tagToSearch.bind(Object(g.a)(i)),i.buildDeleteBox=i.buildDeleteBox.bind(Object(g.a)(i)),i.deleteDumpData=i.deleteDumpData.bind(Object(g.a)(i)),i.displayCheckBox=i.displayCheckBox.bind(Object(g.a)(i)),i.StartAnalyzeMode=i.StartAnalyzeMode.bind(Object(g.a)(i)),i.returnFromAnalysis=i.returnFromAnalysis.bind(Object(g.a)(i)),i}return Object(b.a)(n,[{key:"componentDidMount",value:function(){if(this._isMounted=!0,this.state.basicLinuxData.length&&this.state.basicWindowsData.length||!1!==this.state.analyzeMode){if(!1===this.state.analyzeMode){var e=this.buildWindowsReports();e.push(this.buildLinuxReports()),l.a.render(e,document.getElementById("results"))}}else{var t=this.getReports("linux"),n=this.getReports("windows");this.setState({basicLinuxData:t,basicWindowsData:n},(function(){console.log("+ Basic data from dumps retrieved")}))}}},{key:"componentDidUpdate",value:function(){if(!1===this.state.analyzeMode){v()("#loading-reports").show();var e=[];e.push(this.buildWindowsReports()),e.push(this.buildLinuxReports()),void 0!=e&&(v()("#loading-reports").hide(),l.a.render(e,document.getElementById("results"))),v()("#loading-reports").hide()}}},{key:"StartAnalyzeMode",value:function(e,t,n){var i=this.getReports(t,e.target.name);this.setState({analyzeMode:n,analysedDump:i,analysedDumpOS:t})}},{key:"tagColorState",value:function(e){this.setState({tagColor:e})}},{key:"buildResultsColumns",value:function(){var e=this,t=[],n="search",i="left-column";return!1===this.state.analyzeMode&&t.push(Object(c.jsxs)("div",{id:"page-box",children:[this.buildInfoPopUp(),Object(c.jsxs)("form",{id:"reports-search-container",onSubmit:function(t){t.preventDefault(),e.setState({search:v()('[name="search"]')[0].value})},children:[Object(c.jsx)("button",{className:"search-btn",onClick:function(){return e.setState({search:v()('[name="search"]')[0].value})},children:" Search "}),Object(c.jsx)("input",{type:"text",className:"search-field",name:"search"}),Object(c.jsx)("img",{id:"loading-reports",src:"images/plugin-loading.gif"}),Object(c.jsx)("img",{src:"images/plugin-info.png",name:n,id:"info-button",onClick:function(){return e.pluginInfo(n)}}),this.DOMParserInfoBox(n,'<h2>Search how-to</h2>\n<p>Search can be used to filter visible reports by supplying strings that contain letters equivalent to report column values.\nSearch works with logical AND, so all whitespaces between words equal logical AND operator.</p>\n<p>Reports can also be filtered by data outputted by Volatility plugins. There are 3 keywords for this: </p>\n<ul>\n    <li><span style="color:green">WINDOWS</span> - filter Windows reports</li>\n    <li><span style="color:green">LINUX</span> - filter Linux reports</li>\n    <li><span style="color:green">GLOBAL</span> - filter both Linux and Windows reports</li>\n</ul>\n<p>Keyword must be the first word in the search. Search words after the keyword follow same principal as when analysing dump.</p>\n<p>Analysis search is more advanced and contains several features listed below.</p>\n<h3>Operators</h3>\n<p>Search strings are combined with logical AND (Whitespace) by default, but can also be combined with logical OR by writing OR between the strings.</p>\n<ol>\n    <li><span style="color:green">WINDOWS PID:"620" OR PID:"800"</span> - Show Windows dump report if it contains column PID with either value 620 OR 800</li>\n    <li><span style="color:green">WINDOWS PID:"620" Value:"AMD64"</span> - Show Windows dump report if it contains data row that has column PID with value 620 AND another column Value with value AMD64. (<b>NOTE</b>: Value is column name like Process, PID, Modules, Offset etc. and has nothing to do with search syntax)</li>\n</ol>\n<h3>Regex</h3>\n<p>Quotation mark and free search use regex, so it is important to know special regex characters which are <b>. + * ? ^ $ ( ) [ ] { } | \\</b> . If any these marks are part of the value you are searching, you should comment the mark out using <b>\\</b>, which is one of the special characters, so the same policy applies to it as well.</p>\n<ol>\n    <li><span style="color:green">WINDOWS Path:"C:\\\\Windows\\\\System32\\\\kernel32\\.dll"</span> - Show Windows dump reports that have column Path that contains value C:\\Windows\\System32\\kernel32.dll. <b>NOTE:</b> Commenting dot is usually not needed since it applies to any character except newline in regex syntax.</li>\n    <li><span style="color:green">LINUX "File Path":"\\[vdso\\]"</span> - Show Linux dump reports that contain column File Path with value [vdso].</li>\n</ol>\n<h3>Quotation marks</h3>\n<p>Strings that are surrounded by quotation marks are compared to values in each column in each plugin. This search uses regex, so all regex marks should be commented. Quotation marks that are part of the value should also be commented using \\, so the value can be parsed correctly.</p>\n<ol>\n    <li><span style="color:green">LINUX "/dev/*"</span> - Show Linux dump report if any column contains value that starts with /dev/</li>\n    <li><span style="color:green">WINDOWS Variable:"EXAMPLE" Value:"\\[\\"text\\"\\]"</span> - Show Windows dump report if it contains data row that has column Variable with value EXAMPLE AND column Value with value ["text"].</li>\n</ol>\n<h3>Free search</h3>\n<p>Strings that are not surrounded by quotation marks are parsed mostly the sameway as strings surrounded by quotation marks.</p>\n<p>Difference is that non-quotation marked strings are separated by whitespaces, so values can\'t contain any whitespaces and non-quotation marked strings target all columns, so they cannot be used to target single column name by using column name as prefix (e.g. <span style="color:green">WINDOWS PID:1000</span> would search all Windows reports columns for value PID:1000).</sp>\n<ol>\n    <li><span style="color:green">WINDOWS *\\.ps1</span> - Show Windows dump report if any column contains value that ends with .ps1.</li>\n    <li><span style="color:green">GLOBAL VBoxClient*</span> - Show Windows and Linux reports that contain any column with value starting with VBoxClient.</li>\n</ol>\n<h3>Ranges</h3>\n<p>Range filters can be used to search <b>numerical</b> data within certain range. Range needs to always have a prefix containing column name which is targeted. Range syntax is: <span style="color:green">column:(startvalue-endvalue)</span>. No whitespaces inside brackets are allowed.</p>\n<ol>\n    <li><span style="color:green">GLOBAL Offset:(0x0000850000036750-0x00008F03C0E483B0)</span> - Show Windows and Linux reports that contain column Offset which has value between 0x0000850000036750 and 0x00008F03C0E483B0.</li>\n    <li><span style="color:green">LINUX PID:(50-1000)</span> - Show Linux reports that contain column PID which has value between 50 and 1000.</li>\n</ol>\n<h3>Column names</h3>\n<p> Column names before the actual value tell which column is being targeted. Currently there is no way to specify an individual plugin with certain value. e.g. if search is: <span style="color:green">PID:"500"</span>, all plugins with column PID are targeted. If column name contains whitespaces, it can be surrounded by quotation marks. Column name can not be specified when using free search.</p>\n<ol>\n    <li><span style="color:green">WINDOWS "Last Write Time":"2019-09-18*"</span> - Show Windows reports that contain column Last Write Time with value starting with 2019-09-18</li>\n</ol>\n<h3>Negating search</h3>\n<p>Negating search can be used to remove out some results from search. It works the opposite way as regular search. Other than nested and free search can be turned into negating search by adding - front of the search string. <b>NOTE:</b> Currently this is more useful feature in the analysis search and not very practical in this one.</p>\n<ol>\n    <li><span style="color:green">GLOBAL -Offset:(0x0000850000036750-0x00008F03C0E483B0)</span> - Show Windows and Linux reports that do not contain ANY columns with Offset which has value between 0x0000850000036750 and 0x00008F03C0E483B0. This maybe works for one plugin with Offset column, but some other plugins do not have Offset column, so the report is shown.</li>\n    <li><span style="color:green">LINUX -"*a*" OR -"*0*"</span> - Show Linux reports if it does not contain any a or 0 characters under any column</li>\n</ol>\n<h3>Nested search</h3>\n<p>Nested searches can be used to do more complex searches. In nested search, search strings are put inside brackets turning them into a group. If range search is used inside nested search, closing bracket ) at the end of the search has to be commented out. Currently nested search doesn\'t support negating searches and other nests inside nest.</p>\n<p><b>NOTE:</b> nested searches can be very heavy to browser if several of them occur in same search string!</p>\n<ol>\n    <li><span style="color:green">WINDOWS (Process:"smss.exe" Variable:"*SystemDrive*") OR (Module:"Wd*" -Type:"KeBugCheckReasonCallbackListHead")</span> - Show Windows reports that contain (column Process with value smss.exe AND column Variable containing SystemDrive somewhere within value) OR (column Module which has value starting with Wd*, but that row does not have column Type with value KeBugCheckReasonCallbackListHead).</li>\n    <li><span style="color:green">WINDOWS Process:"lsass.exe" (Base:(140702881546240-140709896912896\\) OR Variable:"*")</span> - Show Windows reports that contain column Process with value lsass.exe AND (column base with value between 140702881546240 and 140709896912896 OR column Variable with any value)</li>\n</ol>\n<h3>Known issues:</h3>\n<ul>\n    <li>When using Offsets, Addresses and other hexadecimal values in this search, you likely need to turn the hexadecimal value into decimal. e.g. Hex 0x0000D98D0AA0E000 converts into decimal number 239199791931392.</li>\n    <li>Size column can not be currently used in this search.</li>\n    <li>Reports Type and Windows reports OS columns can not be currently used in this search.</li>\n</ul>\n',"Search how-to")]}),Object(c.jsxs)("div",{id:"results-container",children:[Object(c.jsx)("div",{className:"results-columns",children:Object(c.jsxs)("ul",{id:"columns",children:[Object(c.jsxs)("li",{id:"column",className:"left-column",children:[Object(c.jsx)("img",{src:"images/plugin-info-white.png",name:i,id:"info-button",onClick:function(){return e.pluginInfo(i)}}),this.DOMParserInfoBox(i,'\n<h2>Reports table</h2>\n<p>Each uploaded dump is displayed in this table, which has columns where you can e.g. insert data helping to identify dumps from each other.</p>\n<p>You can start to analyse dump by pressing  <img style="max-width: 1em" src="images/analyze.png" />  icon.</p>\n<p>You can open up plugin selection by pressing  <img style="max-width: 1em" src="images/select-plugins.png" />  icon next to dump. From there you can select which plugins should be run on the dump. Results of the plugins will appear to analysis page. basicdetails is run by default when dump is uploaded and info when Windows dump uploaded.</p>\n<p>When pressing <img style="max-width: 1em" src="images/edit.png" /> icon, a box will open where you can do modifications to the report by changing name, updating description, adding tags and removing tags related to the dump.</p>\n<p>You can remove dump and all its data from DB by pressing  <img style="max-width: 1em" src="images/delete.png" /> icon.</p>\n',"Reports usage")]}),Object(c.jsx)("li",{id:"column",children:"Name"}),Object(c.jsx)("li",{id:"column",children:"Description"}),Object(c.jsx)("li",{id:"column",children:"OS"}),Object(c.jsx)("li",{id:"column",children:"Type"}),Object(c.jsx)("li",{id:"column",children:"Date"}),Object(c.jsx)("li",{id:"column",className:"tags",children:"Tags"})]})}),Object(c.jsx)("div",{id:"results"})]})]})),t}},{key:"buildEditBox",value:function(e,t,n,i,a){var s=this;null==t&&(t=""),null==n&&(n="");var l=[];return l.push(Object(c.jsxs)("div",{id:"edit-box",name:e,style:{display:"none"},children:[Object(c.jsxs)("div",{id:"edit-box-header",children:[Object(c.jsx)("p",{children:"Update visible data and add tags"}),Object(c.jsx)("img",{id:"close-button",src:"images/close-red.png",name:e,onClick:function(e){return s.displayCheckBox(e,"#edit-box")}})]},"edit-box-header"+e),Object(c.jsxs)("div",{id:"data-edit-block",children:[Object(c.jsx)("p",{id:"title",children:"Change name:"}),Object(c.jsx)("input",{type:"text",id:"edit-field",className:"name-edit-field",name:e,placeholder:t}),Object(c.jsx)("button",{id:"edit-button",onClick:function(t){return s.updateDumpData(t,e,i,"name",v()("[name='"+e+"'].name-edit-field").val())},children:" Change "})]},"edit-box-block"+e+1),Object(c.jsxs)("div",{id:"data-edit-block",children:[Object(c.jsx)("p",{id:"title",children:"Change description:"}),Object(c.jsx)("textarea",{type:"text",id:"edit-field",className:"description-edit-field",name:e,placeholder:n}),Object(c.jsx)("button",{id:"edit-button",onClick:function(t){return s.updateDumpData(t,e,i,"description",v()("[name='"+e+"'].description-edit-field").val())},children:" Update "})]},"edit-box-block"+e+2),Object(c.jsxs)("div",{id:"data-edit-block",children:[Object(c.jsx)("p",{id:"title",children:"Current tags:"}),Object(c.jsx)("div",{id:"current-tags",children:this.buildTags(e,i,a)},"currenttags"+e)]},"edit-box-block"+e+3),Object(c.jsxs)("div",{id:"data-edit-block",children:[Object(c.jsx)("p",{id:"title",children:"Add tag:"}),Object(c.jsx)("input",{type:"text",id:"edit-field",className:"tag-edit-field",name:e}),Object(c.jsxs)("ul",{id:"tag-colors",children:[Object(c.jsx)("li",{id:"tag-color",className:"red",alt:"#F68B8B",onClick:function(e){return s.chooseTagColor(e)}}),Object(c.jsx)("li",{id:"tag-color",className:"green",alt:"#CDFF8E",onClick:function(e){return s.chooseTagColor(e)}}),Object(c.jsx)("li",{id:"tag-color",className:"blue",alt:"#62B3FD",onClick:function(e){return s.chooseTagColor(e)}}),Object(c.jsx)("li",{id:"tag-color",className:"orange",alt:"#FFC188",onClick:function(e){return s.chooseTagColor(e)}}),Object(c.jsx)("li",{id:"tag-color",className:"purple",alt:"#EE84FF",onClick:function(e){return s.chooseTagColor(e)}}),Object(c.jsx)("li",{id:"tag-color",className:"yellow",alt:"#F9DC45",onClick:function(e){return s.chooseTagColor(e)}}),Object(c.jsx)("li",{id:"tag-color",className:"turquoise",alt:"#A1FFE9",onClick:function(e){return s.chooseTagColor(e)}})]}),Object(c.jsx)("button",{id:"edit-button",className:"color-add",onClick:function(t){return s.addTag(t,e,i,"tags",a,v()("[name='"+e+"'].tag-edit-field").val())},children:" Add "})]},"edit-box-block"+e+4)]},"edit-box"+e)),l}},{key:"chooseTagColor",value:function(e){var t=e.target.attributes.alt.value,n=e.target.className;v()("[id=tag-color]").css("border","1px black solid"),v()("#tag-color."+n).css("border","2px red solid"),this.tagColorState(t)}},{key:"addTag",value:function(e,t,n,i,a,s){if((a=null==a?{}:JSON.parse(a))[s]=this.state.tagColor,this.updateDumpData(e,t,n,i,JSON.stringify(a)),"linux"===n){var l=this.getReports("linux");this.setState({basicLinuxData:l},(function(){v()("[id=tag-color]").css("border","1px black solid"),v()("#tag-color.red").css("border","2px red solid"),this.setState({tagColor:"#F68B8B"})}))}else if("windows"===n){var o=this.getReports("windows");this.setState({basicWindowsData:o},(function(){v()("[id=tag-color]").css("border","1px black solid"),v()("#tag-color.red").css("border","2px red solid"),this.setState({tagColor:"#F68B8B"})}))}}},{key:"removeTag",value:function(e,t,n,i,a){if(delete t[e.target.attributes.name.value],this.updateDumpData(e,n,i,a,JSON.stringify(t)),"linux"===i){var s=this.getReports("linux");this.setState({basicLinuxData:s})}else if("windows"===i){var l=this.getReports("windows");this.setState({basicWindowsData:l})}}},{key:"buildTags",value:function(e,t,n){var i=this;if(null==n)return"";var a=[];for(var s in n=JSON.parse(n))a.push(Object(c.jsxs)("div",{id:"tag-block",style:{"background-color":n[s]},children:[Object(c.jsx)("div",{id:"tag-text",onClick:function(e){return i.tagToSearch(e)},children:s},s+e),Object(c.jsx)("img",{id:"remove-tag",src:"images/close-grey.png",name:s,onClick:function(a){return i.removeTag(a,n,e,t,"tags")}},s+e)]},s+e));return a}},{key:"tagToSearch",value:function(e){var t=e.target.innerHTML;v()(".search-field").val(t)}},{key:"updateDumpData",value:function(e,t,n,i,a){var s=new FormData;s.set("db_id",String(t)),s.set("os",String(n)),s.set("data",String(a)),v.a.ajax({contentType:!1,processData:!1,cache:!1,enctype:"multipart/form-data",url:"http://autovola.com:8080/api/v1/update/"+String(i)+"/",type:"POST",data:s,async:!1,complete:function(e,t,i){if("linux"===n){var a=this.getReports("linux");this.setState({basicLinuxData:a})}else if("windows"===n){var s=this.getReports("windows");this.setState({basicWindowsData:s})}}.bind(this)})}},{key:"buildDeleteBox",value:function(e,t){var n=this,i=[];return i.push(Object(c.jsxs)("div",{id:"delete-dump-box",name:t,style:{display:"none"},children:[Object(c.jsxs)("div",{id:"delete-dump-box-header",children:[Object(c.jsx)("p",{children:"Delete dump"},"deldump"+t),Object(c.jsx)("img",{id:"close-button",src:"images/close-red.png",name:t,onClick:function(e){return n.displayCheckBox(e,"#delete-dump-box")}},"closedelete"+t)]},"delboxheader"+t),Object(c.jsx)("p",{children:"Are you sure?"},"deletecheck"+t),Object(c.jsx)("button",{id:"delete-button",onClick:function(){return n.deleteDumpData(e,t)},children:" Delete "},"deletepermanent"+t)]},"delbox"+t)),i}},{key:"deleteDumpData",value:function(e,t){var n=new FormData;if(n.set("db_id",String(t)),n.set("os",String(e)),v.a.ajax({contentType:!1,processData:!1,url:"http://autovola.com:8080/api/v1/delete/dump/",type:"POST",data:n,dataType:"json",async:!1,complete:function(e,t,i){"Fail"===(n=e.responseJSON)&&x("Failed to remove file and/or DB results","#FF4D4D",!0)}}),"linux"===e){var i=this.getReports("linux");this.setState({basicLinuxData:i})}else if("windows"===e){var a=this.getReports("windows");this.setState({basicWindowsData:a})}}},{key:"getReports",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=null;return v.a.ajax({url:"http://autovola.com:8080/api/v1/results/"+e+"/",type:"GET",data:{id:t},dataType:"json",contentType:"application/javascript",async:!1,complete:function(e,t,i){"Fail"===(n=e.responseJSON)&&x("Failed to get results","#FF4D4D",!0)}}),n}},{key:"showDumpDetails",value:function(e,t){}},{key:"displayCheckBox",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,i=e.target.attributes.name.value,a=v()(t+"[name='"+i+"']");"none"===a.css("display")?(a.show(),"#plugin-select-box"===t&&this.getPluginRunStatus(n,i)):"block"===a.css("display")&&a.hide()}},{key:"getPluginRunStatus",value:function(){var e=Object(p.a)(h.a.mark((function e(t,n){var i,a,s,l;return h.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(s in v()("#plugin[name='"+n+"'] #plugin-run-status").attr("src","images/plugin-loading.gif"),i=this.getReports(t,n),"linux"===t?a=ie:"windows"===t&&(a=ce),a)s in i?(l=v()("#plugin[name='"+n+"'] #plugin-run-status[name='"+s+"']"),"ERROR"===i[s]||""===i[s]?l.attr("src","images/plugin-error.png"):"UNSATISFIED"===i[s]?l.attr("src","images/plugin-unsatisfied.png"):Array.isArray(i[s])&&(i[s].length>0?l.attr("src","images/plugin-ok.png"):0===i[s].length&&l.attr("src","images/plugin-empty.png"))):v()("#plugin[name='"+n+"'] #plugin-run-status[name='"+s+"']").attr("src","images/plugin-not-found.png");case 4:case"end":return e.stop()}}),e,this)})));return function(t,n){return e.apply(this,arguments)}}()},{key:"buildPluginSelectBox",value:function(e,t){var n,i=this,a=[],s=[];"linux"===e?n=ie:"windows"===e&&(n=ce);for(var l=[],o=function(e){l.push(Object(c.jsx)("tbody",{children:Object(c.jsx)("tr",{children:Object.keys(n).slice(e,e+3).map((function(n){return Object(c.jsxs)("td",{id:"plugin",name:t,children:[Object(c.jsx)("input",{type:"checkbox",name:t,value:n},"checkbox"+t+e+n),Object(c.jsx)("label",{htmlFor:t,children:n},"checkbox_label"+t+e+n),Object(c.jsx)("img",{id:"plugin-run-status",name:n},e)]},"plugin"+t+e+n)}))},"trplugincheckboxes"+t+e)},"tbodyplugincheckboxes"+t+e))},r=0;Object.keys(n).length>r;r+=3)o(r);return s.push(Object(c.jsx)("div",{id:"plugins",name:t,children:Object(c.jsxs)("table",{children:[Object(c.jsx)("tbody",{children:Object(c.jsx)("tr",{children:Object(c.jsxs)("td",{id:"plugin",children:[Object(c.jsx)("input",{type:"checkbox",name:t,value:"select all",onClick:function(){return i.selectAllPlugins(t)}},"inputselect-all"+t),Object(c.jsx)("label",{htmlFor:t,children:"Select all"},"labelselect-all"+t)]},"td1select-all"+t)},"tr1"+t)},"tbody1"+t),Object(c.jsx)("tbody",{children:Object(c.jsx)("tr",{children:Object(c.jsxs)("td",{id:"plugin",children:[Object(c.jsx)("input",{type:"checkbox",name:t,value:"basicdetails"},"inputbasicdetails"+t),Object(c.jsx)("label",{htmlFor:t,children:"basicdetails"},"labelbasicdetails"+t),Object(c.jsx)("img",{id:"plugin-run-status",name:"basicdetails"},"imgbasicdetails"+t)]},"td2select-all"+t)},"tr2"+t)},"tbody2"+t),l]},"table"+t)},"plugin-select"+t)),a.push(Object(c.jsxs)("div",{id:"plugin-select-box",name:t,style:{display:"none"},children:[Object(c.jsxs)("div",{id:"select-plugins-box-header",children:[Object(c.jsx)("p",{children:"Plugin selection"},"pluginselection"+t),Object(c.jsx)("img",{src:"images/plugin-info-white.png",name:"icons-meaning",id:"info-button",onClick:function(){return i.pluginInfo("icons-meaning")}},"icons-meaning"+t),this.DOMParserInfoBox("icons-meaning",'\n<div id="plugin-image-meaning">\n    <h2>Meanings of different icons</h2>\n    <p><img id="plugin-usage-image" src="images/plugin-loading.gif" /> Plugin results are still being fetched from database. </p>\n    <p><img id="plugin-usage-image" src="images/plugin-not-found.png" /> Plugin results were not found from database, likely due to plugin not being run yet. </p>\n    <p><img id="plugin-usage-image" src="images/plugin-ok.png" /> Plugin ran successfully and gave output.</p>\n    <p><img id="plugin-usage-image" src="images/plugin-empty.png" /> Plugin ran successfully, but gave no output.</p>\n    <p><img id="plugin-usage-image" src="images/plugin-error.png" /> Error occurred when running plugin.</p>\n    <p><img id="plugin-usage-image" src="images/plugin-unsatisfied.png" /> Plugin requirements are unsatisfied. Proper ISF is missing.</p>\n</div>\n'),Object(c.jsx)("img",{id:"close-button",src:"images/close-red.png",name:t,onClick:function(t){return i.displayCheckBox(t,"#plugin-select-box",e)}},"closeplugselect"+t)]},"pluginselectboxheader"+t),Object(c.jsx)("h3",{children:"Select plugins to run"},"selectrun"+t),s,Object(c.jsx)("button",{id:"run-plugins-button",name:t,onClick:function(){return i.runPlugins(e,t)},children:" Run plugins "})]},"pluginselectbox"+t)),a}},{key:"selectAllPlugins",value:function(e){v()("input[type=checkbox][name='"+e+"']").each((function(){this.checked?v()(":checkbox").each((function(){this.checked=!0})):v()(":checkbox").each((function(){this.checked=!1}))}))}},{key:"runPlugins",value:function(e,t){var n=[];n=(n=v()("input[type=checkbox][name='"+t+"']:checked").map((function(){return v()(this).val()})).get()).filter((function(e){return"select all"!==e}));var i=new FormData;i.set("db_id",String(t)),i.set("os",String(e)),i.set("plugins",n),v.a.ajax({contentType:!1,processData:!1,cache:!1,enctype:"multipart/form-data",url:"http://autovola.com:8080/api/v1/run/plugins/",type:"POST",data:i,async:!1,complete:function(e,i,a){e.responseJSON;v()("#plugin-select-box[name='"+t+"']").hide(),v()("input[type=checkbox][name='"+t+"'][value='select all']").prop("checked",!1),this.selectAllPlugins(t),x("Running plugins: "+n,"#5DD55D",!0)}.bind(this)})}},{key:"buildLinuxReports",value:function(){var e=this,t="linux",n=this.reportSearch(this.state.basicLinuxData,this.state.search,t),i=[];if(null!=n){for(var a=0;a<Object.keys(n).length;a++){try{var s=n[a].os_info.length,l={};s<40?l={"font-size":"20px"}:s>40&&s<250&&(l={"font-size":"18px"})}catch(o){}i.push(Object(c.jsxs)("ul",{id:"linux-data-container",children:[Object(c.jsxs)("li",{id:"data-block",className:"button-block",children:[Object(c.jsx)("input",{className:"analyze-button",type:"image",src:"images/analyze.png",alt:"Analyze",name:n[a]._id,onClick:function(t){return e.StartAnalyzeMode(t,"linux",!0)}},"analyze-button"+n[a]._id+a),Object(c.jsx)("input",{className:"plugin-display-button",type:"image",src:"images/select-plugins.png",alt:"plugins",name:n[a]._id,onClick:function(n){return e.displayCheckBox(n,"#plugin-select-box",t)}},"plugin-display-button"+n[a]._id+a),this.buildPluginSelectBox(t,n[a]._id),Object(c.jsx)("input",{className:"edit-dump-data-button",type:"image",src:"images/edit.png",alt:"edit-dump-data",name:n[a]._id,onClick:function(t){return e.displayCheckBox(t,"#edit-box")}},"edit-dump-data-button"+n[a]._id+a),this.buildEditBox(n[a]._id,n[a].name,n[a].description,t,n[a].tags),Object(c.jsx)("input",{className:"delete-dump-check-button",type:"image",src:"images/delete.png",alt:"delete",name:n[a]._id,onClick:function(t){return e.displayCheckBox(t,"#delete-dump-box")}},"delete-dump-check-button"+n[a]._id+a),this.buildDeleteBox(t,n[a]._id)]},"button-block"+n[a]._id+a),Object(c.jsxs)("li",{id:"data-block",children:[" ",null==n[a].name?"-":n[a].name," "]},1+n[a]._id+a),Object(c.jsxs)("li",{id:"data-block",children:[" ",null==n[a].description?"-":n[a].description," "]},2+n[a]._id+a),Object(c.jsx)("li",{id:"data-block",style:l,children:null==n[a].os_info?"-":n[a].os_info},3+n[a]._id+a),Object(c.jsx)("li",{id:"data-block",children:"-"},4+n[a]._id+a),Object(c.jsx)("li",{id:"data-block",children:null==n[a].currenttime?"-":n[a].currenttime},5+n[a]._id+a),Object(c.jsxs)("li",{id:"data-block",className:"tags-block",children:[" ",this.buildTags(n[a]._id,t,n[a].tags)]},6+n[a]._id+a)]},"linux-data-container"+n[a]._id+a))}return i}}},{key:"buildWindowsReports",value:function(){var e=this,t="windows",n=this.reportSearch(this.state.basicWindowsData,this.state.search,t),i=[];if(null!=n){for(var a=0;a<Object.keys(n).length;a++){var s="";try{s=n[a].os_info.ProductType+" "+n[a].os_info.NtMajorVersion+"."+n[a].os_info.NtMinorVersion}catch(o){s="-"}var l="";try{l=n[a].os_info.os}catch(o){l="-"}i.push(Object(c.jsxs)("ul",{id:"windows-data-container",children:[Object(c.jsxs)("li",{id:"data-block",className:"button-block",children:[Object(c.jsx)("input",{className:"analyze-button",type:"image",src:"images/analyze.png",alt:"Analyze",name:n[a]._id,onClick:function(t){return e.StartAnalyzeMode(t,"windows",!0)}},"analyze-button"+n[a]._id+a),Object(c.jsx)("input",{className:"plugin-display-button",type:"image",src:"images/select-plugins.png",alt:"plugins",name:n[a]._id,onClick:function(n){return e.displayCheckBox(n,"#plugin-select-box",t)}},"plugin-display-button"+n[a]._id+a),this.buildPluginSelectBox(t,n[a]._id),Object(c.jsx)("input",{className:"edit-dump-data-button",type:"image",src:"images/edit.png",alt:"edit-dump-data",name:n[a]._id,onClick:function(t){return e.displayCheckBox(t,"#edit-box")}},"edit-dump-data-button"+n[a]._id+a),this.buildEditBox(n[a]._id,n[a].name,n[a].description,t,n[a].tags),Object(c.jsx)("input",{className:"delete-dump-check-button",type:"image",src:"images/delete.png",alt:"delete",name:n[a]._id,onClick:function(t){return e.displayCheckBox(t,"#delete-dump-box")}},"delete-dump-check-button"+n[a]._id+a),this.buildDeleteBox(t,n[a]._id)]},"button-block"+n[a]._id+a),Object(c.jsx)("li",{id:"data-block",children:"undefined"===typeof n[a].name?"-":n[a].name},1+n[a]._id+a),Object(c.jsxs)("li",{id:"data-block",children:[" ",null==n[a].description?"-":n[a].description," "]},2+n[a]._id+a),Object(c.jsx)("li",{id:"data-block",children:l},3+n[a]._id+a),Object(c.jsx)("li",{id:"data-block",children:s},4+n[a]._id+a),Object(c.jsx)("li",{id:"data-block",children:n[a].currenttime},5+n[a]._id+a),Object(c.jsx)("li",{id:"data-block",name:n[a]._id,className:"tags-block",children:this.buildTags(n[a]._id,t,n[a].tags)},6+n[a]._id+a)]},"windows-data-container"+n[a]._id+a))}return i}}},{key:"returnFromAnalysis",value:function(){this.setState({analysedDumpOS:null,analysedDump:null,analyzeMode:!1})}},{key:"render",value:function(){if(!1===this.state.analyzeMode)return Object(c.jsx)("div",{id:"page",children:this.buildResultsColumns()});if(!0===this.state.analyzeMode){if("linux"===this.state.analysedDumpOS)return Object(c.jsx)("div",{id:"page",children:Object(c.jsx)(re,{dumpData:this.state.analysedDump,returnFromAnalysis:this.returnFromAnalysis,showPopUp:this.showPopUp,buildInfoPopUp:this.buildInfoPopUp})});if("windows"===this.state.analysedDumpOS)return Object(c.jsx)("div",{id:"page",children:Object(c.jsx)(pe,{dumpData:this.state.analysedDump,returnFromAnalysis:this.returnFromAnalysis,showPopUp:this.showPopUp,buildInfoPopUp:this.buildInfoPopUp})})}}}]),n}(a.a.Component);var be=function(){return Object(c.jsx)("div",{className:"App",children:Object(c.jsxs)(o.a,{children:[Object(c.jsx)(d,{}),Object(c.jsxs)(r.d,{children:[Object(c.jsx)(r.b,{exact:!0,path:"/",children:Object(c.jsx)(r.a,{to:"/reports"})}),Object(c.jsx)(r.b,{path:"/reports",exact:!0,component:function(){return Object(c.jsx)(me,{})}},"Reports"),Object(c.jsx)(r.b,{path:"/dump",exact:!0,component:function(){return Object(c.jsx)(U,{})}},"Dump"),Object(c.jsx)(r.b,{path:"/symbols",exact:!0,component:function(){return Object(c.jsx)(J,{})}},"Symbols")]})]})})},ge=function(e){e&&e instanceof Function&&n.e(3).then(n.bind(null,65)).then((function(t){var n=t.getCLS,i=t.getFID,a=t.getFCP,s=t.getLCP,l=t.getTTFB;n(e),i(e),a(e),s(e),l(e)}))};l.a.render(Object(c.jsx)(a.a.StrictMode,{children:Object(c.jsx)(be,{})}),document.getElementById("root")),ge()}},[[64,1,2]]]);
//# sourceMappingURL=main.4a3c3dad.chunk.js.map